"""
Author: Miquel Anglada Girotto
Contact: miquelangladagirotto [at] gmail [dot] com
Last Update: 2021-01-12

Workflow purpose
--------------
Workflow to analyze putative associations between exons and cancer at single-exon level.


Outline
-------
        
"""

import os
import pandas as pd

# variables
ROOT = os.path.dirname(os.path.dirname(os.getcwd()))
SRC_DIR = os.path.join(ROOT,"src")
RAW_DIR = os.path.join(ROOT,'data','raw')
PREP_DIR = os.path.join(ROOT,'data','prep')
RESULTS_DIR = os.path.join(ROOT,'results','splicing_dependency_drugs')
MODELS_DIR = os.path.join(ROOT,'results','model_splicing_dependency')
SRC_DIR = os.path.join(ROOT,'src')
SUPPORT_DIR = os.path.join(ROOT,'support')
TS_DIR = os.path.join(os.path.dirname(os.path.dirname(ROOT)),'repositories','target_spotter')

EVENT_TYPES = ['EX'] #['EX','ALTA','ALTD']
DRUG_SCREENS = {
    'GDSC1': pd.read_table(os.path.join(PREP_DIR,'drug_screens','train','GDSC1.tsv.gz'))["ID"].unique(),
    'GDSC2': pd.read_table(os.path.join(PREP_DIR,'drug_screens','train','GDSC2.tsv.gz'))["ID"].unique()
}

EVENT_GENES_OI = {
    "HsaEX0038400": "MDM2",
    "HsaEX0025679": "FGFR2",
    #"HsaEX6022386": "ERBB2"
}

##### RULES #####
rule all:
    input:
        # predict structures
        expand(os.path.join(RESULTS_DIR,'files','structure_inference','{event}_{gene}','proteoforms.tsv.gz'), zip, event=EVENT_GENES_OI.keys(), gene=EVENT_GENES_OI.values()),
        expand(os.path.join(RESULTS_DIR,'files','structure_inference','{event}_{gene}','proteoforms.fasta'), zip, event=EVENT_GENES_OI.keys(), gene=EVENT_GENES_OI.values()),
        
        # associations drug responses and splicing dependencies
        #expand(os.path.join(RESULTS_DIR,'files','models_drug_response-{drug_screen}-{event_type}'), event_type=EVENT_TYPES, drug_screen=DRUG_SCREENS.keys()),
        #expand(os.path.join(RESULTS_DIR,'files','estimated_drug_response-{drug_screen}-{event_type}'), event_type=EVENT_TYPES, drug_screen=DRUG_SCREENS.keys()),
        
        # concatenate model summaries
        #expand(os.path.join(RESULTS_DIR,'files','model_summaries_drug_response-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        
        # concatenate drug rankings
        #expand(os.path.join(RESULTS_DIR,'files','estimated_drug_response_by_drug-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        
        # write selected models
        #expand(os.path.join(RESULTS_DIR,'files','selected_models-{event_type}.txt'), event_type=EVENT_TYPES),
        
        # embed association coefficients
        # expand(os.path.join(RESULTS_DIR,'files','model_summaries_drug_response-{event_type}-coefs_mat.tsv.gz'), event_type=EVENT_TYPES),
        # expand(os.path.join(RESULTS_DIR,'files','embedded_drug_associations-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        
        # split, embed and cluster estimated drug effects of significant associations
        ## split
        # expand(os.path.join(RESULTS_DIR,'files','cluster_estimated_drug_response-{drug_screen}-{event_type}','splitted_matrices'), event_type=EVENT_TYPES, drug_screen=DRUG_SCREENS.keys()),
        ## impute
        # [expand(os.path.join(RESULTS_DIR,'files','cluster_estimated_drug_response-{drug_screen}-{event_type}','imputed_matrices','{drug}.tsv.gz'), drug=DRUG_SCREENS[drug_screen], drug_screen=drug_screen, event_type=EVENT_TYPES) for drug_screen in DRUG_SCREENS.keys()],
        ## embed
        # [expand(os.path.join(RESULTS_DIR,'files','cluster_estimated_drug_response-{drug_screen}-{event_type}','embedded_matrices','{drug}.tsv.gz'), drug=DRUG_SCREENS[drug_screen], drug_screen=drug_screen, event_type=EVENT_TYPES) for drug_screen in DRUG_SCREENS.keys()],
        ## combine
        # expand(os.path.join(RESULTS_DIR,'files','cluster_estimated_drug_response-merged-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        
        # Shortest path lengths in PPIs between drug targets and associations
        ## real
        #expand(os.path.join(RESULTS_DIR,'files','ppi','shortest_path_lengths_to_drug_targets-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        ## random
        # os.path.join(RESULTS_DIR,'files','ppi','shortest_path_lengths_to_drug_targets-random.tsv.gz'),
        

        # plot models
        # os.path.join(RESULTS_DIR,'figures','model_drug_screens')

        
rule model_drug_response:
    input:
        spldep = os.path.join(MODELS_DIR,'files','splicing_dependency-{event_type}','mean.tsv.gz'),
        drug_response = os.path.join(PREP_DIR,'drug_screens','train','{drug_screen}.tsv.gz'),
        selected_models = os.path.join(MODELS_DIR,'files','selected_models-{event_type}.txt'),
        mapping = os.path.join(RAW_DIR,'VastDB','event_annotation-Hs2.tsv.gz')
    output:
        directory(os.path.join(RESULTS_DIR,'files','models_drug_response-{drug_screen}-{event_type}'))
    threads: 24
    resources:
        runtime = 3600*12, # 12 h
        memory = 50
    params:
        script_dir = TS_DIR
    shell:
        """
        nice python {params.script_dir}/target_spotter drugassoc_fit \
                    --drug_response_file={input.drug_response} \
                    --splicing_dependency_file={input.spldep} \
                    --mapping_file={input.mapping} \
                    --selected_models_file={input.selected_models} \
                    --output_dir={output} \
                    --n_jobs={threads}
        """
        

rule combine_model_summaries:
    input:
        [os.path.join(RESULTS_DIR,'files','models_drug_response-{drug_screen}-{event_type}').format(drug_screen=drug_screen, event_type='{event_type}') for drug_screen in DRUG_SCREENS]
    output:
        os.path.join(RESULTS_DIR,'files','model_summaries_drug_response-{event_type}.tsv.gz')
    run:
        import os
        import pandas as pd
        
        model_summaries = []
        for d in input:
            drug_screen = os.path.basename(d).split('-')[1]
            summary = pd.read_table(os.path.join(d,'model_summaries.tsv.gz'))
            summary['drug_screen'] = drug_screen
            summary["DRUG_ID"] = summary["ID"].str.split("_").str[0]
            model_summaries.append(summary)
        model_summaries = pd.concat(model_summaries)
        model_summaries.to_csv(output[0], sep='\t', index=False, compression='gzip')
        
        
rule list_selected_models:
    input:
        models = os.path.join(RESULTS_DIR,"files","model_summaries_drug_response-EX.tsv.gz")
    output:
        os.path.join(RESULTS_DIR,'files','selected_models-{event_type}.txt')
    params:
        thresh_lr_padj = 0.1,
        thresh_nobs = 20
    run:
        import pandas as pd
        models = pd.read_table(input.models)
        models = models.loc[
            (models['lr_padj']<params.thresh_lr_padj) &
            (models['n_obs']>params.thresh_nobs)
        ].copy()
        
        with open(output[0], 'w') as f:
            for drug_id in models['ID'].unique():
                f.write("%s\n" % drug_id)
                
                
rule pivot_drug_associations:
    input:  
        os.path.join(RESULTS_DIR,'files','model_summaries_drug_response-{event_type}.tsv.gz')
    output:
        os.path.join(RESULTS_DIR,'files','model_summaries_drug_response-{event_type}-coefs_mat.tsv.gz')
    run:
        import pandas as pd
        df = pd.read_table(input[0])
        df = df.pivot_table(values='spldep_coefficient', index='EVENT', columns='ID')
        df = df.fillna(0)
        df.reset_index().to_csv(output[0], sep='\t', index=False, compression='gzip')
        

rule embed_drug_associations:
    input:
        os.path.join(RESULTS_DIR,'files','model_summaries_drug_response-{event_type}-coefs_mat.tsv.gz')
    output:
        os.path.join(RESULTS_DIR,'files','embedded_drug_associations-{event_type}.tsv.gz')
    params:
        script_dir=os.path.join(SRC_DIR,'python')
    shell:
        """
        python {params.script_dir}/embed_and_cluster.py \
                    --matrix_file={input} \
                    --output_file={output} 
        """

        
rule figures_model_drug_screens:
    input:
        models = os.path.join(RESULTS_DIR,'files','model_summaries_drug_response-EX.tsv.gz'),
        drug_targets = os.path.join(RAW_DIR,'GDSC','screened_compunds_rel_8.2.csv'),
        embedding = os.path.join(RESULTS_DIR,'files','embedded_drug_associations-EX.tsv.gz'),
        # estimated_response = os.path.join(),
        # drug_screen = os.path.join()
    output:
        directory(os.path.join(RESULTS_DIR,'figures','model_drug_screens'))
    shell:
        """
        Rscript scripts/figures_model_drug_screens.R \
                    --models_file={input.models} \
                    --drug_targets_file={input.drug_targets} \
                    --embedding_file={input.embedding} \
                    --estimated_response_file={input.estimated_response} \
                    --drug_screen_file={input.drug_screen} \
                    --figs_dir={output}
        """
        
        
rule predict_drug_response:
    input:
        spldep = os.path.join(MODELS_DIR,'files','splicing_dependency-{event_type}','mean.tsv.gz'),
        fitted_dir = os.path.join(RESULTS_DIR,'files','models_drug_response-{drug_screen}-{event_type}')
    output:
        directory(os.path.join(RESULTS_DIR,'files','estimated_drug_response-{drug_screen}-{event_type}'))
    params:
        script_dir = TS_DIR
    shell:
        """
        python {params.script_dir}/target_spotter drugassoc_predict \
                    --splicing_dependency_file={input.spldep} \
                    --model_summaries_file={input.fitted_dir}/model_summaries.tsv.gz \
                    --fitted_growth_rates_file={input.fitted_dir}/growth_rates.tsv.gz \
                    --fitted_spldep_file={input.fitted_dir}/fitted_splicing_dependency.tsv.gz \
                    --output_dir={output}
        """
        
rule combine_drug_rankings:
    input:
        [os.path.join(RESULTS_DIR,'files','estimated_drug_response-{drug_screen}-{event_type}').format(drug_screen=drug_screen, event_type='{event_type}') for drug_screen in DRUG_SCREENS]
    output:
        os.path.join(RESULTS_DIR,'files','estimated_drug_response_by_drug-{event_type}.tsv.gz')
    run:
        import os
        import pandas as pd
        dfs = []
        for d in input:
            drug_screen = os.path.basename(d).replace('estimated_drug_response-','')[:5]
            print(drug_screen)
            filename = os.path.join(d,'estimated_drug_response_by_drug.tsv.gz')
            df = pd.read_table(filename)
            df["drug_screen"] = drug_screen
            df["DRUG_ID"] = df["ID"].str.split("_").str[0]
            dfs.append(df)
            
        dfs = pd.concat(dfs)    
        dfs.to_csv(output[0], sep="\t", index=False, compression="gzip")
        

# cluster estimated drug profiles
rule split_estimated_ic50:
    input:
        models_dir = os.path.join(RESULTS_DIR,'files','models_drug_response-{drug_screen}-{event_type}'),
        preds_dir = os.path.join(RESULTS_DIR,'files','estimated_drug_response-{drug_screen}-{event_type}')
    output:
        directory(os.path.join(RESULTS_DIR,'files','cluster_estimated_drug_response-{drug_screen}-{event_type}','splitted_matrices'))
    params:
        thresh_fdr = 0.1
    run:
        import pandas as pd
        
        models = pd.read_table(os.path.join(input.models_dir,'model_summaries.tsv.gz')) 
        preds = pd.read_table(os.path.join(input.preds_dir,'estimated_drug_response_by_drug_and_event.tsv.gz'))
        outdir = output[0]
        os.makedirs(outdir)
        for drug in preds["ID"].unique():
            print(drug)
            tmp = preds.loc[preds["ID"]==drug]
            tmp = tmp.drop(columns=["ID","ENSEMBL","GENE"]).set_index("EVENT")
            
            # only significant associations
            idx = (models["lr_padj"]<params.thresh_fdr) & (models["ID"]==drug)
            events_oi = models.loc[idx,"EVENT"].unique()
            tmp.loc[~tmp.index.isin(events_oi),:] = 0
            
            tmp.reset_index().to_csv(
                os.path.join(outdir,str(drug)+".tsv.gz"), sep="\t", index=False, compression="gzip"
            )
            
            
rule impute_estimated_ic50:
    input:
        pred = os.path.join(RESULTS_DIR,'files','cluster_estimated_drug_response-{drug_screen}-{event_type}','splitted_matrices','{drug}.tsv.gz')
    output:
        os.path.join(RESULTS_DIR,'files','cluster_estimated_drug_response-{drug_screen}-{event_type}','imputed_matrices','{drug}.tsv.gz')
    params:
        script_dir=os.path.join(SRC_DIR,'python'),
        method = 'knn',
        method_kws = '\'{"n_neighbors":5}\'',
        features_as_rows = True
    shell:
        """
        nice python {params.script_dir}/impute_nan.py \
                    --input_file={input.pred} \
                    --output_file={output} \
                    --method={params.method} \
                    --method_kws={params.method_kws} \
                    --features_as_rows={params.features_as_rows}
        """

        
rule embed_matrices:
    input:
        os.path.join(RESULTS_DIR,'files','cluster_estimated_drug_response-{drug_screen}-{event_type}','imputed_matrices','{drug}.tsv.gz')
    output:
        os.path.join(RESULTS_DIR,'files','cluster_estimated_drug_response-{drug_screen}-{event_type}','embedded_matrices','{drug}.tsv.gz')
    params:
        script_dir=os.path.join(SRC_DIR,'python'),
        no_std_replace = 0
    shell:
        """
        nice python {params.script_dir}/embed_and_cluster.py \
                    --matrix_file={input} \
                    --output_file={output}  \
                    --no_std_replace={params.no_std_replace}
        """
        
        
rule combine_embedded_matrices:
    input:
        [os.path.join(RESULTS_DIR,'files','cluster_estimated_drug_response-{drug_screen}-{event_type}','embedded_matrices','{drug}.tsv.gz').format(drug_screen=drug_screen, drug=drug, event_type='{event_type}') for drug_screen in DRUG_SCREENS.keys() for drug in DRUG_SCREENS[drug_screen]]
    output:
        os.path.join(RESULTS_DIR,'files','cluster_estimated_drug_response-merged-{event_type}.tsv.gz')
    run:
        import os
        import pandas as pd
        
        dfs = []
        for f in input:
            drug_id = os.path.basename(f).replace(".tsv.gz","")
            _, drug_screen, event_type = os.path.basename(os.path.dirname(os.path.dirname(f))).split("-")
            print(drug_id)
            df = pd.read_table(f)
            df["ID"] = drug_id
            df["DRUG_ID"] = drug_id.split("_")[0]
            df["drug_screen"] = drug_screen
            df["event_type"] = event_type
            dfs.append(df)
        
        dfs = pd.concat(dfs)
        dfs.to_csv(output[0], sep="\t", index=False, compression="gzip")
        
        
rule shortest_paths_real:
    input:
        ppi = os.path.join(PREP_DIR,'ppi','STRINGDB.tsv.gz'),
        drug_targets = os.path.join(PREP_DIR,'drug_screens','drug_targets.tsv.gz'),
        drug_associations = os.path.join(RESULTS_DIR,'files','model_summaries_drug_response-{event_type}.tsv.gz')
    output:
        os.path.join(RESULTS_DIR,'files','ppi','shortest_path_lengths_to_drug_targets-{event_type}.tsv.gz')
    params:
        mode = 'real',
        thresh_fdr = 0.1
    threads: 8
    shell:
        """
        nice python scripts/ppi_path_lengths.py \
                    --mode={params.mode} \
                    --ppi_file={input.ppi} \
                    --drug_targets_file={input.drug_targets} \
                    --drug_associations_file={input.drug_associations} \
                    --output_file={output} \
                    --thresh_fdr={params.thresh_fdr} \
                    --n_jobs={threads}
        """
        
        
rule shortest_paths_random:
    input:
        ppi = os.path.join(PREP_DIR,'ppi','STRINGDB.tsv.gz'),
        drug_targets = os.path.join(PREP_DIR,'drug_screens','drug_targets.tsv.gz')
    output:
        os.path.join(RESULTS_DIR,'files','ppi','shortest_path_lengths_to_drug_targets-random.tsv.gz')
    params:
        mode = 'random',
        n_random_sources = 1000
    threads: 16
    shell:
        """
        nice python scripts/ppi_path_lengths.py \
                    --mode={params.mode} \
                    --ppi_file={input.ppi} \
                    --drug_targets_file={input.drug_targets} \
                    --output_file={output} \
                    --n_random_sources={params.n_random_sources} \
                    --n_jobs={threads}
        """
        
        
        
rule structure_inference_get_proteoforms:
    input:
        annotation = os.path.join(RAW_DIR,'VastDB','event_annotation-Hs2.tsv.gz'),
        event_info = os.path.join(RAW_DIR,"VastDB","EVENT_INFO-hg38.tab.gz")
    output:
        df = os.path.join(RESULTS_DIR,'files','structure_inference','{event}_{gene}','proteoforms.tsv.gz'),
        fasta = os.path.join(RESULTS_DIR,'files','structure_inference','{event}_{gene}','proteoforms.fasta')
    params:
        script_dir = os.path.join(SRC_DIR,"python"),
        event_oi = "{event}"
    shell:
        """
        nice python {params.script_dir}/get_proteoforms.py \
                    --event_oi={params.event_oi} \
                    --annotation_file={input.annotation} \
                    --event_info_file={input.event_info} \
                    --output_df_file={output.df} \
                    --output_fasta_file={output.fasta}
        """
