"""
Author: Miquel Anglada Girotto
Contact: miquelangladagirotto [at] gmail [dot] com

Workflow purpose
--------------
Workflow to analyze putative associations between exons inclusion and drug sensitivity.

Outline
-------
- Drug-exon inference
    1. Associations
    2. Estimation
    3. Shortest path lengths in STRINGDB network
    
"""

import os
import pandas as pd

# variables
ROOT = os.path.dirname(os.path.dirname(os.getcwd()))
SRC_DIR = os.path.join(ROOT,"src")
RAW_DIR = os.path.join(ROOT,'data','raw')
PREP_DIR = os.path.join(ROOT,'data','prep')
RESULTS_DIR = os.path.join(ROOT,'results','exon_drug_interactions')
MODELS_DIR = os.path.join(ROOT,'results','model_splicing_dependency')
SRC_DIR = os.path.join(ROOT,'src')
SUPPORT_DIR = os.path.join(ROOT,'support')
TS_DIR = os.path.join(os.path.dirname(os.path.dirname(ROOT)),'repositories','target_spotter')

EVENT_TYPES = ['EX']
DRUG_SCREENS = {
    'GDSC1': pd.read_table(os.path.join(PREP_DIR,'drug_screens','train','GDSC1.tsv.gz'))["ID"].unique(),
    'GDSC2': pd.read_table(os.path.join(PREP_DIR,'drug_screens','train','GDSC2.tsv.gz'))["ID"].unique()
}

##### RULES #####
rule all:
    input:
        # associations drug responses and splicing dependencies
        expand(os.path.join(RESULTS_DIR,'files','models_drug_response-{drug_screen}-{event_type}'), event_type=EVENT_TYPES, drug_screen=DRUG_SCREENS.keys()),
        expand(os.path.join(RESULTS_DIR,'files','estimated_drug_response-{drug_screen}-{event_type}'), event_type=EVENT_TYPES, drug_screen=DRUG_SCREENS.keys()),
        
        # concatenate model summaries
        expand(os.path.join(RESULTS_DIR,'files','model_summaries_drug_response-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        
        # concatenate drug rankings
        expand(os.path.join(RESULTS_DIR,'files','estimated_drug_response_by_drug-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        
        # write selected models
        expand(os.path.join(RESULTS_DIR,'files','selected_models-{event_type}.txt'), event_type=EVENT_TYPES),
        
        # Shortest path lengths in PPIs between drug targets and associations
        ## real
        expand(os.path.join(RESULTS_DIR,'files','ppi','shortest_path_lengths_to_drug_targets-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        
        # figures
        os.path.join(RESULTS_DIR,'figures','model_drug_screens')

        
rule model_drug_response:
    input:
        spldep = os.path.join(MODELS_DIR,'files','splicing_dependency-{event_type}','mean.tsv.gz'),
        drug_response = os.path.join(PREP_DIR,'drug_screens','train','{drug_screen}.tsv.gz'),
        selected_models = os.path.join(MODELS_DIR,'files','selected_models-{event_type}.txt'),
        mapping = os.path.join(RAW_DIR,'VastDB','event_annotation-Hs2.tsv.gz')
    output:
        directory(os.path.join(RESULTS_DIR,'files','models_drug_response-{drug_screen}-{event_type}'))
    threads: 24
    resources:
        runtime = 3600*12, # 12 h
        memory = 50
    params:
        script_dir = TS_DIR
    shell:
        """
        nice python {params.script_dir}/target_spotter drugassoc_fit \
                    --drug_response_file={input.drug_response} \
                    --splicing_dependency_file={input.spldep} \
                    --mapping_file={input.mapping} \
                    --selected_models_file={input.selected_models} \
                    --output_dir={output} \
                    --n_jobs={threads}
        """
        

rule combine_model_summaries:
    input:
        [os.path.join(RESULTS_DIR,'files','models_drug_response-{drug_screen}-{event_type}').format(drug_screen=drug_screen, event_type='{event_type}') for drug_screen in DRUG_SCREENS]
    output:
        os.path.join(RESULTS_DIR,'files','model_summaries_drug_response-{event_type}.tsv.gz')
    run:
        import os
        import pandas as pd
        
        model_summaries = []
        for d in input:
            drug_screen = os.path.basename(d).split('-')[1]
            summary = pd.read_table(os.path.join(d,'model_summaries.tsv.gz'))
            summary['drug_screen'] = drug_screen
            summary["DRUG_ID"] = summary["ID"].str.split("_").str[0]
            model_summaries.append(summary)
        model_summaries = pd.concat(model_summaries)
        model_summaries.to_csv(output[0], sep='\t', index=False, compression='gzip')
        
        
rule list_selected_models:
    input:
        models = os.path.join(RESULTS_DIR,"files","model_summaries_drug_response-EX.tsv.gz")
    output:
        os.path.join(RESULTS_DIR,'files','selected_models-{event_type}.txt')
    params:
        thresh_lr_padj = 0.1,
        thresh_nobs = 20
    run:
        import pandas as pd
        models = pd.read_table(input.models)
        models = models.loc[
            (models['lr_padj']<params.thresh_lr_padj) &
            (models['n_obs']>params.thresh_nobs)
        ].copy()
        
        with open(output[0], 'w') as f:
            for drug_id in models['ID'].unique():
                f.write("%s\n" % drug_id)
                
rule predict_drug_response:
    input:
        spldep = os.path.join(MODELS_DIR,'files','splicing_dependency-{event_type}','mean.tsv.gz'),
        fitted_dir = os.path.join(RESULTS_DIR,'files','models_drug_response-{drug_screen}-{event_type}')
    output:
        directory(os.path.join(RESULTS_DIR,'files','estimated_drug_response-{drug_screen}-{event_type}'))
    params:
        script_dir = TS_DIR
    shell:
        """
        python {params.script_dir}/target_spotter drugassoc_predict \
                    --splicing_dependency_file={input.spldep} \
                    --model_summaries_file={input.fitted_dir}/model_summaries.tsv.gz \
                    --fitted_growth_rates_file={input.fitted_dir}/growth_rates.tsv.gz \
                    --fitted_spldep_file={input.fitted_dir}/fitted_splicing_dependency.tsv.gz \
                    --output_dir={output}
        """
        
rule combine_drug_rankings:
    input:
        [os.path.join(RESULTS_DIR,'files','estimated_drug_response-{drug_screen}-{event_type}').format(drug_screen=drug_screen, event_type='{event_type}') for drug_screen in DRUG_SCREENS]
    output:
        os.path.join(RESULTS_DIR,'files','estimated_drug_response_by_drug-{event_type}.tsv.gz')
    run:
        import os
        import pandas as pd
        dfs = []
        for d in input:
            drug_screen = os.path.basename(d).replace('estimated_drug_response-','')[:5]
            print(drug_screen)
            filename = os.path.join(d,'estimated_drug_response_by_drug.tsv.gz')
            df = pd.read_table(filename)
            df["drug_screen"] = drug_screen
            df["DRUG_ID"] = df["ID"].str.split("_").str[0]
            dfs.append(df)
            
        dfs = pd.concat(dfs)    
        dfs.to_csv(output[0], sep="\t", index=False, compression="gzip")
        

rule shortest_paths_real:
    input:
        ppi = os.path.join(PREP_DIR,'ppi','STRINGDB.tsv.gz'),
        drug_targets = os.path.join(PREP_DIR,'drug_screens','drug_targets.tsv.gz'),
        drug_associations = os.path.join(RESULTS_DIR,'files','model_summaries_drug_response-{event_type}.tsv.gz')
    output:
        os.path.join(RESULTS_DIR,'files','ppi','shortest_path_lengths_to_drug_targets-{event_type}.tsv.gz')
    params:
        mode = 'real',
        thresh_fdr = 0.1
    threads: 8
    shell:
        """
        nice python scripts/ppi_path_lengths.py \
                    --mode={params.mode} \
                    --ppi_file={input.ppi} \
                    --drug_targets_file={input.drug_targets} \
                    --drug_associations_file={input.drug_associations} \
                    --output_file={output} \
                    --thresh_fdr={params.thresh_fdr} \
                    --n_jobs={threads}
        """       
                
rule figures_model_drug_screens:
    input:
        metadata = os.path.join(PREP_DIR,"metadata","CCLE.tsv.gz"),
        models = os.path.join(RESULTS_DIR,"files","model_summaries_drug_response-EX.tsv.gz"),
        drug_targets = os.path.join(PREP_DIR,'drug_screens','drug_targets.tsv.gz'),
        rnai = os.path.join(PREP_DIR,"demeter2","CCLE.tsv.gz"),
        estimated_response = os.path.join(RESULTS_DIR,"files","estimated_drug_response_by_drug-EX.tsv.gz"),
        drug_screens_dir = os.path.join(PREP_DIR,'drug_screens'),
        spldep_ccle = os.path.join(MODELS_DIR,"files","splicing_dependency-EX","mean.tsv.gz"),
        paths_real = os.path.join(RESULTS_DIR,"files","ppi","shortest_path_lengths_to_drug_targets-EX.tsv.gz"),
        spldep_models = os.path.join(MODELS_DIR,"files","models_gene_dependency-EX","model_summaries.tsv.gz"),
        msigdb_dir = os.path.join(RAW_DIR,"MSigDB","msigdb_v7.4","msigdb_v7.4_files_to_download_locally","msigdb_v7.4_GMTs"),
        protein_impact = os.path.join(ROOT,"data","raw","VastDB","PROT_IMPACT-hg38-v3.tab.gz"),
        splicing = os.path.join(PREP_DIR,"event_psi","CCLE-EX.tsv.gz"),
        genexpr = os.path.join(PREP_DIR,"genexpr_tpm","CCLE.tsv.gz"),
        snv = os.path.join(RAW_DIR,'DepMap','achilles_ccle','CCLE_mutations.csv'),
        ppi = os.path.join(PREP_DIR,'ppi','STRINGDB.tsv.gz'),
        event_info = os.path.join(RAW_DIR,"VastDB","EVENT_INFO-hg38_noseqs.tsv"),
        gene_info = os.path.join(RAW_DIR,"ENSEMBL","gene_annotation-hg38.tsv.gz")
    output:
        directory(os.path.join(RESULTS_DIR,'figures','model_drug_screens'))
    shell:
        """
        Rscript scripts/figures_model_drug_screens.R \
                    --metadata_file={input.metadata} \
                    --models_file={input.models} \
                    --drug_targets_file={input.drug_targets} \
                    --rnai_file={input.rnai} \
                    --estimated_response_file={input.estimated_response} \
                    --drug_screens_dir={input.drug_screens_dir} \
                    --spldep_ccle_file={input.spldep_ccle} \
                    --paths_real_file={input.paths_real} \
                    --spldep_models_file={input.spldep_models} \
                    --msigdb_dir={input.msigdb_dir} \
                    --protein_impact_file={input.protein_impact} \
                    --splicing_file={input.splicing} \
                    --genexpr_file={input.genexpr} \
                    --snv_file={input.snv} \
                    --ppi_file={input.ppi} \
                    --event_info_file={input.event_info} \
                    --gene_info_file={input.gene_info} \
                    --figs_dir={output}
        """
        