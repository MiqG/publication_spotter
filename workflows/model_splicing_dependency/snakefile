"""
Author: Miquel Anglada Girotto
Contact: miquelangladagirotto [at] gmail [dot] com

Workflow purpose
--------------
Workflow to analyze putative associations between exons and cancer at single-exon level.

Outline
-------
- Spl. Dep. inference
    1. model fitting
    2. model selection

- Spl. Dep. validation
    1. model validation with exon-level CRISPR screens (Thomas2020, Gonatopoulos2020)
    2. model validation  with combinatorial perturbations (ENCORE)
"""

import os

# variables
ROOT = os.path.dirname(os.path.dirname(os.getcwd()))
RAW_DIR = os.path.join(ROOT,'data','raw')
PREP_DIR = os.path.join(ROOT,'data','prep')
RESULTS_DIR = os.path.join(ROOT,'results','model_splicing_dependency')
SRC_DIR = os.path.join(ROOT,'src')
SUPPORT_DIR = os.path.join(ROOT,'support')
TS_DIR = os.path.join(os.path.dirname(os.path.dirname(ROOT)),'repositories','target_spotter')


EVENT_TYPES = ["EX"]
N_SAMPLES = {
    "Thomas2020": 2,
    "Hart2015": 12
}
SAVE_PARAMS = {"sep":"\t", "index":False, "compression":"gzip"}

# model selection parameters
THRESH_PVALUE = 0.025
THRESH_CORR = 0.2
THRESH_NOBS = 0

##### RULES #####
rule all:
    input:
        # MODEL SELECTION
        ## fit gene dependencies and get empirical distributions of coefficients
        expand(os.path.join(RESULTS_DIR,'files','models_gene_dependency-{event_type}'), event_type=EVENT_TYPES),
        ## compute splicing dependencies (mean, median, std)
        expand(os.path.join(RESULTS_DIR,'files','splicing_dependency-{event_type}'), event_type=EVENT_TYPES),
        ## write selected models
        ### as lists
        expand(os.path.join(RESULTS_DIR,'files','selected_models-{event_type}.txt'), event_type=EVENT_TYPES),
        expand(os.path.join(RESULTS_DIR,'files','selected_models-{event_type}-genes.txt'), event_type=EVENT_TYPES),
        ## make figures
        os.path.join(RESULTS_DIR,'figures','model_selection'),
        os.path.join(RESULTS_DIR,"figures","sf_mutations"),
        
        ## CRISPR KO SCREENS - Achilles KO gene dependencies rather than KD gene dependencies
        expand(os.path.join(RESULTS_DIR,'files','achilles','models_gene_dependency-{event_type}'), event_type=EVENT_TYPES),
        
        
        # MODEL VALIDATION
        ## EXON-LEVEL CRISPR SCREENS
        ### compute splicing dependencies
        expand(os.path.join(RESULTS_DIR,'files','{dataset}','splicing_dependency-{event_type}'), event_type=EVENT_TYPES, dataset=["Thomas2020","Hart2015"]),
        ### make figures
        os.path.join(RESULTS_DIR,'figures','validation_crispr_screen','Thomas2020'),
        os.path.join(RESULTS_DIR,'figures','validation_crispr_screen','Gonatopoulos-Pournatzis2020'),        
        
        ## ENCORE RBP KD SCREENS
        ### compute splicing dependencies
        expand(os.path.join(RESULTS_DIR,'files','ENCORE','splicing_dependency-{event_type}'), event_type=EVENT_TYPES),
        ### compute delta TPM
        os.path.join(RESULTS_DIR,'files','ENCORE','diff_tpm.tsv.gz'),
        ### compute delta PSI
        expand(os.path.join(RESULTS_DIR,'files','ENCORE','delta_psi-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        expand(os.path.join(RESULTS_DIR,'files','ENCORE','delta_psi_rel-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        ### compute delta Spl. Dep.
        expand(os.path.join(RESULTS_DIR,'files','ENCORE','delta_spldep-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        ### compute harm scores
        expand(os.path.join(RESULTS_DIR,'files','ENCORE','harm_score-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        expand(os.path.join(RESULTS_DIR,'files','ENCORE','harm_score_rel-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        ### make figures
        os.path.join(RESULTS_DIR,'figures','validation_encore'),
        
        ## PSI UNCERTAINTY
        ### simulate PSI based on total exon read counts
        os.path.join(RESULTS_DIR,"files","psi_uncertainty","psi_simulated","inhouse-EX.tsv.gz"),
        ### compute splicing depenency
        os.path.join(RESULTS_DIR,"files","psi_uncertainty",'splicing_dependency-EX','inhouse'),
        ### make figures
        #os.path.join(RESULTS_DIR,"figures","psi_uncertainty")
        
        
##### MODEL SELECTION #####
rule model_gene_dependency:
    input:
        splicing_file = os.path.join(PREP_DIR,'event_psi','CCLE-{event_type}.tsv.gz'),
        genexpr_file = os.path.join(PREP_DIR,'genexpr_tpm','CCLE.tsv.gz'),
        gene_dependency_file = os.path.join(PREP_DIR,'demeter2','CCLE.tsv.gz'),
        mapping_file = os.path.join(RAW_DIR,'VastDB','event_annotation-Hs2.tsv.gz')
    output:
        directory(os.path.join(RESULTS_DIR,'files','models_gene_dependency-{event_type}'))
    threads: 24
    resources:
        runtime = 3600*12, # 12h
        memory = 50
    params:
        script_dir = TS_DIR,
        n_iterations = 1000
    shell:
        """
        nice python {params.script_dir}/target_spotter spldep_fit \
                    --gene_dependency_file={input.gene_dependency_file} \
                    --splicing_file={input.splicing_file} \
                    --genexpr_file={input.genexpr_file} \
                    --mapping_file={input.mapping_file} \
                    --output_dir={output} \
                    --n_iterations={params.n_iterations} \
                    --n_jobs={threads} \
                    --log_transform
        """
        
        
rule model_gene_dependency_achilles:
    input:
        splicing_file = os.path.join(PREP_DIR,'event_psi','CCLE-{event_type}.tsv.gz'),
        genexpr_file = os.path.join(PREP_DIR,'genexpr_tpm','CCLE.tsv.gz'),
        gene_dependency_file = os.path.join(PREP_DIR,'achilles','CCLE_comparable.tsv.gz'),
        mapping_file = os.path.join(RAW_DIR,'VastDB','event_annotation-Hs2.tsv.gz')
    output:
        directory(os.path.join(RESULTS_DIR,'files','achilles','models_gene_dependency-{event_type}'))
    threads: 24
    resources:
        runtime = 604800, # seconds = 168h = 7 days
        memory = 30
    params:
        script_dir = TS_DIR,
        n_iterations = 1000
    shell:
        """
        nice python {params.script_dir}/target_spotter spldep_fit \
                    --gene_dependency_file={input.gene_dependency_file} \
                    --splicing_file={input.splicing_file} \
                    --genexpr_file={input.genexpr_file} \
                    --mapping_file={input.mapping_file} \
                    --output_dir={output} \
                    --n_iterations={params.n_iterations} \
                    --n_jobs={threads} \
                    --log_transform
        """
        
        
rule compute_splicing_dependency:
    input:
        psi = os.path.join(PREP_DIR,'event_psi','CCLE-{event_type}.tsv.gz'),
        genexpr = os.path.join(PREP_DIR,'genexpr_tpm','CCLE.tsv.gz'),
        coefs_dir = os.path.join(RESULTS_DIR,'files','models_gene_dependency-{event_type}')
    output:
        directory(os.path.join(RESULTS_DIR,'files','splicing_dependency-{event_type}'))
    threads: 24
    resources:
        runtime = 3600*24, # seconds = 24h = 1 day
        memory = 30
    params:
        script_dir = TS_DIR
    shell:
        """
        nice python {params.script_dir}/target_spotter spldep_predict \
                    --splicing_file={input.psi} \
                    --genexpr_file={input.genexpr} \
                    --coefs_splicing_file={input.coefs_dir}/coefs_splicing.pickle.gz \
                    --coefs_genexpr_file={input.coefs_dir}/coefs_genexpr.pickle.gz \
                    --coefs_intercept_file={input.coefs_dir}/coefs_intercept.pickle.gz \
                    --output_dir={output} \
                    --n_jobs={threads} \
                    --log_transform
        """
    
    
rule list_selected_models:
    input:
        coefs_dir = os.path.join(RESULTS_DIR,'files','models_gene_dependency-{event_type}')
    output:
        selected_models = os.path.join(RESULTS_DIR,'files','selected_models-{event_type}.txt'),
        selected_models_gene = os.path.join(RESULTS_DIR,'files','selected_models-{event_type}-genes.txt')
    params:
        thresh_lr_pvalue = THRESH_PVALUE,
        thresh_corr = THRESH_CORR,
        thresh_nobs = THRESH_NOBS
    run:
        import os
        import pandas as pd
        
        models = pd.read_table(os.path.join(input.coefs_dir,'model_summaries.tsv.gz'))
        models = models.loc[
            (models['lr_pvalue']<params.thresh_lr_pvalue) &
            (models['pearson_correlation_mean']>params.thresh_corr) &
            (models['n_obs']>params.thresh_nobs)
        ].copy()
        
        models["EVENT"].to_csv(output.selected_models, sep="\t", header=None, index=False)
        models["GENE"].drop_duplicates().to_csv(output.selected_models_gene, sep="\t", header=None, index=False)
        
        print("Done!")
        
        
rule figures_model_selection:
    input:
        models = os.path.join(RESULTS_DIR,"files","models_gene_dependency-EX","model_summaries.tsv.gz"),
        ccle_stats = os.path.join(PREP_DIR,"stats","CCLE.tsv.gz"),
        gene_mut_freq = os.path.join(ROOT,"data","prep","gene_mutation_freq","CCLE.tsv.gz"),
        msigdb_dir = os.path.join(ROOT,"data","raw","MSigDB","msigdb_v7.4","msigdb_v7.4_files_to_download_locally","msigdb_v7.4_GMTs"),
        protein_impact = os.path.join(ROOT,"data","raw","VastDB","PROT_IMPACT-hg38-v3.tab.gz"),
        cosmic_genes = os.path.join(ROOT,"data","raw","COSMIC","cancer_gene_census.tsv"),
        spldep = os.path.join(RESULTS_DIR,"files","splicing_dependency-EX","mean.tsv.gz"),
        rnai = os.path.join(PREP_DIR,"demeter2","CCLE.tsv.gz"),
        genexpr = os.path.join(PREP_DIR,"genexpr_tpm","CCLE.tsv.gz"),
        splicing = os.path.join(PREP_DIR,"event_psi","CCLE-EX.tsv.gz"),
        cancer_events = os.path.join(ROOT,"support","cancer_events.tsv"),
        ascanceratlas = os.path.join(RAW_DIR,"ASCancerAtlas","CASE_all-VastDB_mapped.tsv.gz"),
        event_info = os.path.join(RAW_DIR,"VastDB","EVENT_INFO-hg38_noseqs.tsv"),
        metadata = os.path.join(PREP_DIR,"metadata","CCLE.tsv.gz")
    output:
        directory(os.path.join(RESULTS_DIR,'figures','model_selection'))
    shell:
        """
        Rscript scripts/figures_model_selection.R \
                    --models_file={input.models} \
                    --ccle_stats_file={input.ccle_stats} \
                    --gene_mut_freq_file={input.gene_mut_freq} \
                    --msigdb_dir={input.msigdb_dir} \
                    --protein_impact_file={input.protein_impact} \
                    --cosmic_genes_file={input.cosmic_genes} \
                    --spldep_file={input.spldep} \
                    --rnai_file={input.rnai} \
                    --genexpr_file={input.genexpr} \
                    --splicing_file={input.splicing} \
                    --cancer_events_file={input.cancer_events} \
                    --ascanceratlas_file={input.ascanceratlas} \
                    --event_info_file={input.event_info} \
                    --metadata_file={input.metadata} \
                    --figs_dir={output}
        """
    
    
rule figures_sf_mutations:
    input:
        snv = os.path.join(RAW_DIR,'DepMap','achilles_ccle','CCLE_mutations.csv'),
        max_harm = os.path.join(RESULTS_DIR,"files","splicing_dependency-EX","max_harm_score-mean.tsv.gz"),
        selected_exons = os.path.join(RESULTS_DIR,'files','selected_models-EX.txt'),
        event_info = os.path.join(RAW_DIR,"VastDB","EVENT_INFO-hg38_noseqs.tsv"),
        cancer_events = os.path.join(ROOT,"support","cancer_events.tsv"),
        ascanceratlas = os.path.join(RAW_DIR,"ASCancerAtlas","CASE_all-VastDB_mapped.tsv.gz")
    output:
        directory(os.path.join(RESULTS_DIR,"figures","sf_mutations"))
    shell:
        """
        Rscript scripts/figures_sf_mutations.R \
                     --snv_file={input.snv} \
                     --max_harm_file={input.max_harm} \
                     --selected_exons_file={input.selected_exons} \
                     --event_info_file={input.event_info} \
                     --cancer_events_file={input.cancer_events} \
                     --ascanceratlas_file={input.ascanceratlas} \
                     --figs_dir={output}
        """
        
        
##### MODEL VALIDATION #####        
rule compute_splicing_dependency_exon_crispr_screen_datsets:
    input:
        psi = os.path.join(RAW_DIR,'articles','{dataset}','vast_out','PSI-minN_1-minSD_0-noVLOW-min_ALT_use25-Tidy.tab.gz'),
        genexpr = lambda wildcards: os.path.join(RAW_DIR,'articles','{dataset}','vast_out','TPM-hg38-{n_samples}.tab.gz').format(dataset=wildcards.dataset, n_samples=N_SAMPLES[wildcards.dataset]),
        coefs_dir = os.path.join(RESULTS_DIR,'files','models_gene_dependency-{event_type}')
    output:
        directory(os.path.join(RESULTS_DIR,'files','{dataset}','splicing_dependency-{event_type}'))
    threads: 15
    resources:
        runtime = 86400, # seconds = 24h = 1 day
        memory = 30
    params:
        script_dir = TS_DIR
    shell:
        """
        nice python {params.script_dir}/target_spotter spldep_predict \
                    --splicing_file={input.psi} \
                    --genexpr_file={input.genexpr} \
                    --coefs_splicing_file={input.coefs_dir}/coefs_splicing.pickle.gz \
                    --coefs_genexpr_file={input.coefs_dir}/coefs_genexpr.pickle.gz \
                    --coefs_intercept_file={input.coefs_dir}/coefs_intercept.pickle.gz \
                    --output_dir={output} \
                    --n_jobs={threads} \
                    --log_transform
        """
        
        
rule figures_validation_crispr_Thomas2020:
    input:
        crispr = os.path.join(PREP_DIR,'Thomas2020','crispr_screen.tsv.gz'),
        event_info = os.path.join(RAW_DIR,"VastDB","EVENT_INFO-hg38_noseqs.tsv"),
        psi = os.path.join(RAW_DIR,'articles','Thomas2020','vast_out','PSI-minN_1-minSD_0-noVLOW-min_ALT_use25-Tidy.tab.gz'),
        tpm = os.path.join(RAW_DIR,'articles','Thomas2020','vast_out','TPM-hg38-2.tab.gz'),
        selected_events = os.path.join(RESULTS_DIR,"files","selected_models-EX.txt"),
        spldep = os.path.join(RESULTS_DIR,'files','Thomas2020','splicing_dependency-EX','mean.tsv.gz'),
        ccle_splicing = os.path.join(PREP_DIR,"event_psi","CCLE-EX.tsv.gz"),
        ccle_spldep = os.path.join(RESULTS_DIR,"files","splicing_dependency-EX","mean.tsv.gz")
    output:
        directory(os.path.join(RESULTS_DIR,'figures','validation_crispr_screen','Thomas2020'))
    shell:
        """
        Rscript scripts/figures_validation_crispr_screen_Thomas2020.R \
                    --crispr_file={input.crispr} \
                    --event_info_file={input.event_info} \
                    --psi_file={input.psi} \
                    --tpm_file={input.tpm} \
                    --selected_events_file={input.selected_events} \
                    --spldep_file={input.spldep} \
                    --ccle_splicing_file={input.ccle_splicing} \
                    --ccle_spldep_file={input.ccle_spldep} \
                    --figs_dir={output}
        """

        
rule figures_validation_crispr_GonatopoulosPournatzis2020:
    input:
        crispr = os.path.join(RAW_DIR,"articles","Gonatopoulos-Pournatzis2020","exon_targeting_library_scores.xlsx"),
        event_info = os.path.join(RAW_DIR,"VastDB","EVENT_INFO-hg38_noseqs.tsv"),
        psi = os.path.join(RAW_DIR,'articles','Hart2015','vast_out','PSI-minN_1-minSD_0-noVLOW-min_ALT_use25-Tidy.tab.gz'),
        tpm = os.path.join(RAW_DIR,'articles','Hart2015','vast_out','TPM-hg38-12.tab.gz'),
        selected_events = os.path.join(RESULTS_DIR,"files","selected_models-EX.txt"),
        spldep = os.path.join(RESULTS_DIR,'files','Hart2015','splicing_dependency-EX','mean.tsv.gz'),
    output:
        directory(os.path.join(RESULTS_DIR,'figures','validation_crispr_screen','Gonatopoulos-Pournatzis2020'))
    params:
        total = 100
    shell:
        """
        Rscript scripts/figures_validation_crispr_screen_Gonatopoulos.R \
                    --crispr_file={input.crispr} \
                    --event_info_file={input.event_info} \
                    --psi_file={input.psi} \
                    --tpm_file={input.tpm} \
                    --selected_events_file={input.selected_events} \
                    --spldep_file={input.spldep} \
                    --figs_dir={output}
        """
        
        
rule compute_splicing_dependency_encore:
    input:
        psi = os.path.join(PREP_DIR,'event_psi','ENCORE-{event_type}.tsv.gz'),
        genexpr = os.path.join(PREP_DIR,'genexpr_tpm','ENCORE.tsv.gz'),
        coefs_dir = os.path.join(RESULTS_DIR,'files','models_gene_dependency-{event_type}')
    output:
        directory(os.path.join(RESULTS_DIR,'files','ENCORE','splicing_dependency-{event_type}'))
    threads: 15
    resources:
        runtime = 86400, # seconds = 24h = 1 day
        memory = 30
    params:
        script_dir = TS_DIR
    shell:
        """
        nice python {params.script_dir}/target_spotter spldep_predict \
                    --splicing_file={input.psi} \
                    --genexpr_file={input.genexpr} \
                    --coefs_splicing_file={input.coefs_dir}/coefs_splicing.pickle.gz \
                    --coefs_genexpr_file={input.coefs_dir}/coefs_genexpr.pickle.gz \
                    --coefs_intercept_file={input.coefs_dir}/coefs_intercept.pickle.gz \
                    --output_dir={output} \
                    --n_jobs={threads} \
                    --log_transform
        """
        
        
rule diff_tpm_encore:
    input:
        metadata = os.path.join(PREP_DIR,'metadata','ENCORE.tsv.gz'),
        genexpr = os.path.join(RAW_DIR,'ENCODE','ENCORE','vast_out','TPM-hg38-1097.tab.gz')
    output:
        diff_tpm = os.path.join(RESULTS_DIR,'files','ENCORE','diff_tpm.tsv.gz')
    run:
        import pandas as pd
        import numpy as np
        
        metadata = pd.read_table(input.metadata)
        genexpr = pd.read_table(input.genexpr, index_col=[0,1])
        
        genexpr = np.log2(genexpr + 1)
        genexpr.columns = [c.replace("_1","") for c in genexpr.columns]
        
        # as the difference between conditions and the mean of the conditions
        diff_tpm = {}
        for sample_oi in metadata["sampleID"]:
            # get the controls of the sample
            ctls = metadata.loc[metadata["sampleID"]==sample_oi, "control_samples"].values[0]
            
            # controls will be np.nan
            if isinstance(ctls,str):
                ctls = ctls.split(",")
                tpm_ctls = genexpr[ctls].mean(axis=1)
                
                # compute log2 fold-change
                dtpm = genexpr[sample_oi] - tpm_ctls
                
                diff_tpm[sample_oi] = dtpm
                
                del dtpm, tpm_ctls, ctls
                
        
        diff_tpm = pd.DataFrame(diff_tpm)
        
        # save
        diff_tpm.reset_index().to_csv(output.diff_tpm, sep="\t", index=False, compression="gzip")
        
        print("Done!")
        
        
rule delta_psi_encore:
    input:
        metadata = os.path.join(PREP_DIR,'metadata','ENCORE.tsv.gz'),
        psi = os.path.join(PREP_DIR,'event_psi','ENCORE-{event_type}.tsv.gz')
    output:
        delta_psi = os.path.join(RESULTS_DIR,'files','ENCORE','delta_psi-{event_type}.tsv.gz'),
        delta_psi_rel = os.path.join(RESULTS_DIR,'files','ENCORE','delta_psi_rel-{event_type}.tsv.gz')
    run:
        import pandas as pd
        import numpy as np
        
        metadata = pd.read_table(input.metadata)
        psi = pd.read_table(input.psi, index_col=0)
        
        # delta PSI as the difference between conditions and the mean of the conditions
        delta_psi = {}
        delta_psi_rel = {}
        for sample_oi in metadata["sampleID"]:
            # get the controls of the sample
            ctls = metadata.loc[metadata["sampleID"]==sample_oi, "control_samples"].values[0]
            
            # controls will be np.nan
            if isinstance(ctls,str):
                ctls = ctls.split(",")
                psi_ctls = psi[ctls].mean(axis=1)
                
                # compute delta PSI
                dpsi = psi[sample_oi] - psi_ctls
                
                # compute Glass' delta PSI
                pseudocount = psi[ctls].std(axis=1).mean()
                rel_dpsi = dpsi / (psi[ctls].std(axis=1) + pseudocount)
                
                delta_psi[sample_oi] = dpsi
                delta_psi_rel[sample_oi] = rel_dpsi
                
                del dpsi, rel_dpsi, psi_ctls, ctls
                
        
        delta_psi = pd.DataFrame(delta_psi)
        delta_psi_rel = pd.DataFrame(delta_psi_rel)
        
        # save
        delta_psi.reset_index().to_csv(output.delta_psi, sep="\t", index=False, compression="gzip")
        delta_psi_rel.reset_index().to_csv(output.delta_psi_rel, sep="\t", index=False, compression="gzip")
        
        print("Done!")

        
rule delta_spldep_encore:
    input:
        metadata = os.path.join(PREP_DIR,'metadata','ENCORE.tsv.gz'),
        spldep_dir = os.path.join(RESULTS_DIR,'files','ENCORE','splicing_dependency-{event_type}')
    output:
        delta_spldep = os.path.join(RESULTS_DIR,'files','ENCORE','delta_spldep-{event_type}.tsv.gz'),
    run:
        import os
        import pandas as pd
        import numpy as np
        
        metadata = pd.read_table(input.metadata)
        spldep = pd.read_table(os.path.join(input.spldep_dir,"mean.tsv.gz"), index_col=0)
        
        # delta Spl. Dep. as the difference between conditions and the mean of the conditions
        delta_spldep = {}
        for sample_oi in metadata["sampleID"]:
            # get the controls of the sample
            ctls = metadata.loc[metadata["sampleID"]==sample_oi, "control_samples"].values[0]
            
            # controls will be np.nan
            if isinstance(ctls,str):
                ctls = ctls.split(",")
                spldep_ctls = spldep[ctls].mean(axis=1)
                
                # compute delta PSI (Glass' delta)
                dspldep = (spldep[sample_oi] - spldep_ctls) / spldep[ctls].std(axis=1)
                
                delta_spldep[sample_oi] = dspldep
                
                del dspldep, spldep_ctls, ctls
                
        
        delta_spldep = pd.DataFrame(delta_spldep)
        
        # save
        delta_spldep.reset_index().to_csv(output.delta_spldep, sep="\t", index=False, compression="gzip")
        
        print("Done!")

        
rule harm_score_encore:
    input:
        metadata = os.path.join(PREP_DIR,'metadata','ENCORE.tsv.gz'),
        spldep_dir = os.path.join(RESULTS_DIR,'files','ENCORE','splicing_dependency-{event_type}'),
        delta_spldep = os.path.join(RESULTS_DIR,'files','ENCORE','delta_spldep-{event_type}.tsv.gz'),
        delta_psi = os.path.join(RESULTS_DIR,'files','ENCORE','delta_psi-{event_type}.tsv.gz'),
        delta_psi_rel = os.path.join(RESULTS_DIR,'files','ENCORE','delta_psi_rel-{event_type}.tsv.gz')
    output:
        harm_score = os.path.join(RESULTS_DIR,'files','ENCORE','harm_score-{event_type}.tsv.gz'),
        harm_score_rel = os.path.join(RESULTS_DIR,'files','ENCORE','harm_score_rel-{event_type}.tsv.gz')
    run:
        import os
        import pandas as pd
        import numpy as np
        
        # load
        metadata = pd.read_table(input.metadata)
        spldep = pd.read_table(os.path.join(input.spldep_dir,"mean.tsv.gz"), index_col=0)
        delta_spldep = pd.read_table(input.delta_spldep, index_col=0)
        delta_psi = pd.read_table(input.delta_psi, index_col=0)
        delta_psi_rel = pd.read_table(input.delta_psi_rel, index_col=0)
        
        # compute ratio spldep/dpsi for the corresponding controls of each condition
        harm_score = {}
        harm_score_rel = {}
        for sample_oi in delta_psi.columns:
            # get deltas
            dspldep = delta_spldep[sample_oi]
            dpsi = delta_psi[sample_oi]
            dpsi_rel = delta_psi_rel[sample_oi]
            
            # get the controls of the sample
            ctls = metadata.loc[metadata["sampleID"]==sample_oi, "control_samples"].values[0]
            ctls = ctls.split(",")
            
            # get the average splicing dependency of the controls
            ctls_spldep = spldep[ctls].mean(axis=1)
            
            # normalize splicing dependency by delta psi
            harm_score[sample_oi] = dpsi * ctls_spldep
            harm_score_rel[sample_oi] = dpsi_rel * ctls_spldep
                        
        harm_score = pd.DataFrame(harm_score)
        harm_score_rel = pd.DataFrame(harm_score_rel)
        
        # save
        harm_score.reset_index()\
                   .to_csv(output.harm_score, sep="\t", index=False, compression="gzip")
        harm_score_rel.reset_index()\
                   .to_csv(output.harm_score_rel, sep="\t", index=False, compression="gzip")
        
        print("Done!")

        
rule figures_validation_encore:
    input:
        rnai = os.path.join(PREP_DIR,"demeter2","CCLE.tsv.gz"),
        diff_tpm = os.path.join(RESULTS_DIR,'files','ENCORE','diff_tpm.tsv.gz'),
        delta_psi = os.path.join(RESULTS_DIR,'files','ENCORE','delta_psi-EX.tsv.gz'),
        spldep = os.path.join(RESULTS_DIR,'files','ENCORE','splicing_dependency-EX','mean.tsv.gz'),
        harm_score = os.path.join(RESULTS_DIR,"files","ENCORE","harm_score-EX.tsv.gz"),
        selected_events = os.path.join(RESULTS_DIR,"files","selected_models-EX.txt"),
        event_info = os.path.join(RAW_DIR,"VastDB","EVENT_INFO-hg38_noseqs.tsv"),
        gene_annot = os.path.join(RAW_DIR,"HGNC","gene_annotations.tsv.gz"),
        metadata = os.path.join(PREP_DIR,'metadata','ENCORE.tsv.gz'),
        crispr = os.path.join(PREP_DIR,'Thomas2020','crispr_screen.tsv.gz')
    output:
        directory(os.path.join(RESULTS_DIR,'figures','validation_encore'))
    shell:
        """
        Rscript scripts/figures_validation_encore.R \
                    --rnai_file={input.rnai} \
                    --diff_tpm_file={input.diff_tpm} \
                    --delta_psi_file={input.delta_psi} \
                    --spldep_file={input.spldep} \
                    --harm_score_file={input.harm_score} \
                    --selected_events_file={input.selected_events} \
                    --event_info_file={input.event_info} \
                    --metadata_file={input.metadata} \
                    --crispr_file={input.crispr} \
                    --figs_dir={output}
        """
        
##### PSI UNCERTAINTY #####
rule simulate_psi:
    input:
        psi = os.path.join(PREP_DIR,"event_psi","inhouse-EX.tsv.gz"),
        total_reads = os.path.join(PREP_DIR,"event_total_reads","inhouse-EX.tsv.gz")
    output:
        psi_simulated = os.path.join(RESULTS_DIR,"files","psi_uncertainty","psi_simulated","inhouse-EX.tsv.gz")
    run:
        import pandas as pd
        import numpy as np
        
        # load
        psi = pd.read_table(input.psi, index_col=0)
        total_reads = pd.read_table(input.total_reads, index_col=0)
        
        # subset
        common_samples = set(psi.columns).intersection(total_reads.columns)
        common_events = set(psi.index).intersection(total_reads.index)
        
        psi = psi.loc[common_events,common_samples].copy()
        total_reads = total_reads.loc[common_events,common_samples].copy()
        
        # simulate psi
        def simulate_psi_single(x_psi, x_total_reads, n_random_samples=100):
            
            if np.isfinite(x_psi):
                simulation = np.random.binomial(x_total_reads, x_psi/100, 100) / x_total_reads
                simulation = simulation * 100 # rescale
                simulated_psi = np.mean(simulation)
            else:
                simulated_psi = np.nan
                
            return simulated_psi
        
        
        def simulate_psi(col_psi, col_total_reads):
            df = pd.concat([col_psi, col_total_reads], axis=1)
            simulated_psi = df.apply(lambda row: simulate_psi_single(row[0], row[1]), axis=1)
            simulated_psi = np.round(simulated_psi, 2)
            return simulated_psi
            
            
        psi_simulated = psi.combine(total_reads, 
            lambda col_psi, col_total_reads: simulate_psi(col_psi, col_total_reads)
        )
        
        # save
        psi_simulated.reset_index().to_csv(output.psi_simulated, **SAVE_PARAMS)
        
        print("Done!")
        

rule compute_splicing_dependency_psi_simulated:
    input:
        psi = os.path.join(RESULTS_DIR,"files","psi_uncertainty","psi_simulated","inhouse-EX.tsv.gz"),
        genexpr = os.path.join(PREP_DIR,'genexpr_tpm','inhouse.tsv.gz'),
        coefs_dir = os.path.join(RESULTS_DIR,'files','models_gene_dependency-EX')
    output:
        directory(os.path.join(RESULTS_DIR,"files","psi_uncertainty",'splicing_dependency-EX','inhouse'))
    threads: 15
    resources:
        runtime = 3600*1, # 1h
        memory = 5 # GB
    params:
        script_dir = TS_DIR
    shell:
        """
        nice python {params.script_dir}/target_spotter spldep_predict \
                    --splicing_file={input.psi} \
                    --genexpr_file={input.genexpr} \
                    --coefs_splicing_file={input.coefs_dir}/coefs_splicing.pickle.gz \
                    --coefs_genexpr_file={input.coefs_dir}/coefs_genexpr.pickle.gz \
                    --coefs_intercept_file={input.coefs_dir}/coefs_intercept.pickle.gz \
                    --output_dir={output} \
                    --n_jobs={threads} \
                    --log_transform
        """