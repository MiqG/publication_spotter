"""
Author: Miquel Anglada Girotto
Contact: miquelangladagirotto [at] gmail [dot] com
Last Update: 2021-01-12

Workflow purpose
--------------
Workflow to analyze putative associations between exons and cancer at single-exon level.


Outline
-------
        
"""

import os

# variables
ROOT = os.path.dirname(os.path.dirname(os.getcwd()))
RAW_DIR = os.path.join(ROOT,'data','raw')
PREP_DIR = os.path.join(ROOT,'data','prep')
RESULTS_DIR = os.path.join(ROOT,'results','model_splicing_dependency')
SRC_DIR = os.path.join(ROOT,'src')
SUPPORT_DIR = os.path.join(ROOT,'support')
TS_DIR = os.path.join(os.path.dirname(os.path.dirname(ROOT)),'repositories','target_spotter')
EVENT_TYPES = ['EX','ALTA','ALTD','INT']

##### RULES #####
rule all:
    input:
        # fit gene dependencies and get empirical distributions of coefficients
        expand(os.path.join(RESULTS_DIR,'files','models_gene_dependency-{event_type}'), event_type=EVENT_TYPES),
        
        # compute splicing dependencies (mean, median, std)
        expand(os.path.join(RESULTS_DIR,'files','splicing_dependency-{event_type}'), event_type=EVENT_TYPES),
        
        # EDA models of splicing dependencies
        # os.path.join(RESULTS_DIR,'figures','model_selection'),
        
        # write selected models
        expand(os.path.join(RESULTS_DIR,'files','selected_models-{event_type}.txt'), event_type=['EX']),
        
        # impute splicing dependencies with selected models
        expand(os.path.join(RESULTS_DIR,'files','imputed_splicing_dependency_mean-{event_type}.tsv.gz'), event_type=['EX']),
        
        # embed splicing dependencies with selected models
        expand(os.path.join(RESULTS_DIR,'files','embedded_splicing_dependency_mean-{event_type}.tsv.gz'), event_type=['EX']),
        
        # EDA embeddings of splicing dependencies
        # os.path.join(RESULTS_DIR,'figures','splicing_dependency_embeddings'),
        
        # Associations
        # expand(os.path.join(RESULTS_DIR,'files','correlation_spldep_indices-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        
        # Validation
        ## CRISPR event KO dataset (Thomas 2020)
        #os.path.join(RESULTS_DIR,'figures','validation_crispr'),
        ## EDA known genes of interest
        # os.path.join(RESULTS_DIR,'figures','validation_genes_oi'),
        
        # EDA relationship between interaction terms in linear models
        # os.path.join(RESULTS_DIR,'figures','interaction_analysis')
        
        
rule model_gene_dependency:
    input:
        splicing_file = os.path.join(PREP_DIR,'event_psi','CCLE-{event_type}.tsv.gz'),
        genexpr_file = os.path.join(PREP_DIR,'genexpr_tpm','CCLE.tsv.gz'),
        gene_dependency_file = os.path.join(PREP_DIR,'demeter2','CCLE.tsv.gz'),
        mapping_file = os.path.join(RAW_DIR,'VastDB','event_annotation-Hs2.tsv.gz')
    output:
        directory(os.path.join(RESULTS_DIR,'files','models_gene_dependency-{event_type}'))
    threads: 20
    resources:
        runtime = 604800, # seconds = 168h = 7 days
        memory = 30
    params:
        script_dir = TS_DIR,
        n_iterations = 500
    shell:
        """
        python {params.script_dir}/target_spotter spldep_fit \
                    --gene_dependency_file={input.gene_dependency_file} \
                    --splicing_file={input.splicing_file} \
                    --genexpr_file={input.genexpr_file} \
                    --mapping_file={input.mapping_file} \
                    --output_dir={output} \
                    --n_iterations={params.n_iterations} \
                    --n_jobs={threads}
        """
        
        
rule compute_splicing_dependency:
    input:
        psi = os.path.join(PREP_DIR,'event_psi','CCLE-{event_type}.tsv.gz'),
        genexpr = os.path.join(PREP_DIR,'genexpr_tpm','CCLE.tsv.gz'),
        coefs_dir = os.path.join(RESULTS_DIR,'files','models_gene_dependency-{event_type}')
    output:
        directory(os.path.join(RESULTS_DIR,'files','splicing_dependency-{event_type}'))
    threads: 20
    resources:
        runtime = 86400, # seconds = 24h = 1 day
        memory = 30
    params:
        script_dir = TS_DIR
    shell:
        """
        python {params.script_dir}/target_spotter spldep_predict \
                    --splicing_file={input.psi} \
                    --genexpr_file={input.genexpr} \
                    --coefs_splicing_file={input.coefs_dir}/coefs_splicing.pickle.gz \
                    --coefs_genexpr_file={input.coefs_dir}/coefs_genexpr.pickle.gz \
                    --coefs_interaction_file={input.coefs_dir}/coefs_interaction.pickle.gz \
                    --coefs_intercept_file={input.coefs_dir}/coefs_intercept.pickle.gz \
                    --output_dir={output} \
                    --n_jobs={threads}
        """
        
    
rule list_selected_models:
    input:
        models = os.path.join(RESULTS_DIR,'files','models_gene_dependency-{event_type}','model_summaries.tsv.gz')
    output:
        os.path.join(RESULTS_DIR,'files','selected_models-{event_type}.txt')
    params:
        thresh_lr_pvalue = 0.005,
        thresh_corr = 0.2
    run:
        import pandas as pd
        models = pd.read_table(input.models)
        models = models.loc[
            (models['lr_pvalue']<params.thresh_lr_pvalue) &
            (models['pearson_correlation_mean']>params.thresh_corr)
        ].copy()
        
        with open(output[0], 'w') as f:
            for event in models['EVENT'].values:
                f.write("%s\n" % event)
        
    
rule impute_splicing_dependency:
    input:
        spldep = os.path.join(RESULTS_DIR,'files','splicing_dependency-{event_type}','mean.tsv.gz'),
        rows_oi = os.path.join(RESULTS_DIR,'files','selected_models-{event_type}.txt')
    output:
        os.path.join(RESULTS_DIR,'files','imputed_splicing_dependency_mean-{event_type}.tsv.gz')
    params:
        script_dir=os.path.join(SRC_DIR,'python'),
        method = 'knn',
        method_kws = '\'{"n_neighbors":5}\'',
        features_as_rows = True
    shell:
        """
        python {params.script_dir}/impute_nan.py \
                    --input_file={input.spldep} \
                    --output_file={output} \
                    --rows_oi_file={input.rows_oi} \
                    --method={params.method} \
                    --method_kws={params.method_kws} \
                    --features_as_rows={params.features_as_rows}
        """

        
rule embed_matrices:
    input:
        os.path.join(RESULTS_DIR,'files','imputed_splicing_dependency_mean-{event_type}.tsv.gz')
    output:
        os.path.join(RESULTS_DIR,'files','embedded_splicing_dependency_mean-{event_type}.tsv.gz')
    params:
        script_dir=os.path.join(SRC_DIR,'python')
    shell:
        """
        python {params.script_dir}/embed_and_cluster.py \
                    --matrix_file={input} \
                    --output_file={output} 
        """
        
        
rule figures_model_selection:
    input:
        models = os.path.join(RESULTS_DIR,'files','models_gene_dependency-EX','model_summaries.tsv.gz'),
        rnai = os.path.join(PREP_DIR,'demeter2','CCLE.tsv.gz'),
        spldep = os.path.join(RESULTS_DIR,'files','splicing_dependency-EX','mean.tsv.gz'),
        msigdb = os.path.join(RAW_DIR,'MSigDB','msigdb_v7.4','msigdb_v7.4_files_to_download_locally','msigdb_v7.4_GMTs'),
        protein_impact = os.path.join(RAW_DIR,'VastDB','PROT_IMPACT-hg38-v3.tab.gz'),
        gene_mut_freq = os.path.join(PREP_DIR,'gene_mutation_freq','CCLE.tsv.gz'),
        event_mut_freq = os.path.join(PREP_DIR,'event_mutation_freq','CCLE-EX.tsv.gz'),
        possible_interactions = os.path.join(SUPPORT_DIR,'possible_pairwise_interaction_categories.tsv'),
        cancer_events = os.path.join(SUPPORT_DIR,'cancer_events.tsv'),
        ccle_stats = os.path.join(PREP_DIR,'stats','CCLE.tsv.gz')
    output:
        directory(os.path.join(RESULTS_DIR,'figures','model_selection'))
    shell:
        """
        Rscript scripts/figures_model_selection.R \
                    --models_file={input.models} \
                    --ccle_stats_file={input.ccle_stats} \
                    --msigdb_dir={input.msigdb} \
                    --protein_impact_file={input.protein_impact} \
                    --gene_mut_freq_file={input.gene_mut_freq} \
                    --event_mut_freq_file={input.event_mut_freq} \
                    --cancer_events_file={input.cancer_events} \
                    --rnai_file={input.rnai} \
                    --spldep_file={input.spldep} \
                    --possible_interactions_file={input.possible_interactions} \
                    --figs_dir={output}
        """
    
    
rule figures_embeddings:
    input:
        embedded_dependency = os.path.join(RESULTS_DIR,'files','embedded_splicing_dependency_mean-EX.tsv.gz'),
        metadata = os.path.join(PREP_DIR,'metadata','CCLE.tsv.gz'),
        indices = os.path.join(PREP_DIR,'transcriptome_indices','CCLE.tsv.gz')
    output:
        directory(os.path.join(RESULTS_DIR,'figures','splicing_dependency_embeddings'))
    shell:
        """
        Rscript scripts/figures_embedding.R \
                    --embedded_dependency_file={input.embedded_dependency} \
                    --metadata_file={input.metadata} \
                    --indices_file={input.indices} \
                    --figs_dir={output}
        """
    

rule figures_validation_crispr:
    input:
        protein_impact = os.path.join(RAW_DIR,'VastDB','PROT_IMPACT-hg38-v3.tab.gz'),
        annotation = os.path.join(RAW_DIR,'VastDB','EVENT_INFO-hg38_noseqs.tsv'),
        psi = os.path.join(RAW_DIR,'articles','Thomas2020','vast_out','PSI-minN_1-minSD_0-noVLOW-min_ALT_use25-Tidy.tab.gz'),
        genexpr = os.path.join(RAW_DIR,'articles','Thomas2020','vast_out','TPM-hg38-2.tab.gz'),
        crispr_screen = os.path.join(PREP_DIR,'Thomas2020','crispr_screen.tsv.gz'),
        models = os.path.join(RESULTS_DIR,'files','models_gene_dependency-EX.tsv.gz')
    output:
        directory(os.path.join(RESULTS_DIR,'figures','validation_crispr'))
    params:
        total = 100
    shell:
        """
        Rscript scripts/figures_validation_crispr.R \
                    --protein_impact_file={input.protein_impact} \
                    --annotation_file={input.annotation} \
                    --psi_file={input.psi} \
                    --genexpr_file={input.genexpr} \
                    --crispr_screen_file={input.crispr_screen} \
                    --models_file={input.models} \
                    --figs_dir={output} \
                    --total={params.total}
        """
        
        
rule correlate_transcriptome_indices_ccle:
    input:
        spldep = os.path.join(RESULTS_DIR,'files','splicing_dependency-{event_type}','mean.tsv.gz'),
        indices = os.path.join(PREP_DIR,'transcriptome_indices','CCLE.tsv.gz')
    output:
        os.path.join(RESULTS_DIR,'files','correlation_spldep_indices-{event_type}.tsv.gz')
    params:
        script_dir = os.path.join(SRC_DIR,'python'),
        sample_col = 'index',
        cor_method = 'spearman',
        padj_method = 'fdr_bh'
    shell:
        """
        python {params.script_dir}/correlation_exon_transcriptome_indices.py \
                        --omic_file={input.spldep} \
                        --sample_properties_file={input.indices} \
                        --sample_col={params.sample_col} \
                        --cor_method={params.cor_method} \
                        --padj_method={params.padj_method} \
                        --output_file={output}
        """
