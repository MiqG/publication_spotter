"""
Author: Miquel Anglada Girotto
Contact: miquelangladagirotto [at] gmail [dot] com

Workflow purpose
--------------
Workflow to analyze putative associations between exons and cancer at single-exon level.


Outline
-------
- Spl. Dep. validation
    1. compute inhouse splicing dependencies
    2. identify targets with therapeutic potential in inhouse cancer cell lines
    3. validate selected targets experimentally
"""

import os

# variables
ROOT = os.path.dirname(os.path.dirname(os.getcwd()))
SUPPORT_DIR = os.path.join(ROOT,"support")
SRC_DIR = os.path.join(ROOT,"src")
RAW_DIR = os.path.join(ROOT,'data','raw')
PREP_DIR = os.path.join(ROOT,'data','prep')
RESULTS_DIR = os.path.join(ROOT,'results','experimental_validation')
TS_DIR = os.path.join(os.path.dirname(os.path.dirname(ROOT)),'repositories','target_spotter')
CCLE_DIR = os.path.join(ROOT,"results","model_splicing_dependency")
TCGA_DIR = os.path.join(ROOT,'results','streamlined_therapy_dev')
YASARA_PATH = "~/yasara/yasara"

PROLIF_TYPES = ["low_prolif","high_prolif"]
SAVE_PARAMS = {"sep":"\t", "index":False, "compression":"gzip"}

PDB_FILES = {
    "FNBP1": os.path.join(SUPPORT_DIR,"structures","ESMfold","FNBP1includedENSP00000413625.pdb"),
    "PPP1R12A": os.path.join(SUPPORT_DIR,"structures","ESMfold","PPP1R12AincludedENSP00000446855.pdb"),
    "KRAS": os.path.join(SUPPORT_DIR,"structures","ESMfold","KRASincludedENSP00000256078.pdb"),
    "PRPF18": os.path.join(SUPPORT_DIR,"structures","ESMfold","PRPF18includedENSP00000392142.pdb"),
    "YAP1": os.path.join(SUPPORT_DIR,"structures","ESMfold","YAP1includedENSP00000282441.pdb"),
    "VLDLR": os.path.join(SUPPORT_DIR,"structures","ESMfold","VLDLRincludedENSP00000371532.pdb"),
    "RCC1": os.path.join(SUPPORT_DIR,"structures","ESMfold","RCC1includedENSP00000413644.pdb"),
    "NUP85": os.path.join(SUPPORT_DIR,"structures","ESMfold","NUP85includedENSP00000245544.pdb"),
}
##### RULES #####
rule all:
    input:
        # compute splicing dependencies inhouse dataset
        os.path.join(RESULTS_DIR,'files','splicing_dependency-EX'),
        
        # create models for cell lines with low proliferation
        ## subset
        os.path.join(RESULTS_DIR,"files",'CCLE-event_psi-EX-low_prolif.tsv.gz'),
        os.path.join(RESULTS_DIR,"files","CCLE-genexpr_tpm-low_prolif.tsv.gz"),
        os.path.join(RESULTS_DIR,"files",'CCLE-event_psi-EX-high_prolif.tsv.gz'),
        os.path.join(RESULTS_DIR,"files","CCLE-genexpr_tpm-high_prolif.tsv.gz"),
        ## fit
        expand(os.path.join(RESULTS_DIR,'files','models_gene_dependency-{prolif_type}-EX'), prolif_type=PROLIF_TYPES),
        ## predict on inhouse dataset
        expand(os.path.join(RESULTS_DIR,'files','splicing_dependency-{prolif_type}-EX'), prolif_type=PROLIF_TYPES),
        
        # proteoform info
        os.path.join(RESULTS_DIR,'files','proteoform_info',"domains.tsv.gz"),
        os.path.join(RESULTS_DIR,'files','proteoform_info',"exons.tsv.gz"),
        
        # figures
        os.path.join(RESULTS_DIR,'figures','selection_exons_to_validate'),
        os.path.join(RESULTS_DIR,"figures","validation"),
        expand(os.path.join(RESULTS_DIR,"figures","structures_validated_exons","{gene_oi}"), gene_oi=PDB_FILES.keys())

        
rule compute_splicing_dependency:
    input:
        psi = os.path.join(PREP_DIR,"event_psi","inhouse-EX.tsv.gz"),
        genexpr = os.path.join(PREP_DIR,"genexpr_tpm","inhouse.tsv.gz"),
        coefs_dir = os.path.join(TS_DIR,"data","fitted","splicing_dependency")
    output:
        directory(os.path.join(RESULTS_DIR,'files','splicing_dependency-EX'))
    threads: 8
    resources:
        runtime = 86400, # seconds = 24h = 1 day
        memory = 30
    params:
        script_dir = TS_DIR
    shell:
        """
        nice python {params.script_dir}/target_spotter spldep_predict \
                    --splicing_file={input.psi} \
                    --genexpr_file={input.genexpr} \
                    --coefs_splicing_file={input.coefs_dir}/coefs_splicing.pickle.gz \
                    --coefs_genexpr_file={input.coefs_dir}/coefs_genexpr.pickle.gz \
                    --coefs_intercept_file={input.coefs_dir}/coefs_intercept.pickle.gz \
                    --output_dir={output} \
                    --n_jobs={threads} \
                    --log_transform
        """

        
rule subset_by_prolif:
    input:
        splicing = os.path.join(PREP_DIR,'event_psi','CCLE-EX.tsv.gz'),
        genexpr = os.path.join(PREP_DIR,'genexpr_tpm','CCLE.tsv.gz'),
        metadata = os.path.join(PREP_DIR,'metadata','CCLE.tsv.gz'),
        events_oi = os.path.join(SUPPORT_DIR,"exons_with_therapeutic_potential.txt"),
        ghandi = os.path.join(SUPPORT_DIR,"Ghandi2019-suptab1-41586_2019_1186_MOESM4_ESM.xlsx"),
        tsherniak = os.path.join(SUPPORT_DIR,"Tsherniak2017-suptab1-mmc1.xlsx"),
        mapping = os.path.join(RAW_DIR,'VastDB','event_annotation-Hs2.tsv.gz')
    output:
        splicing_low_prolif = os.path.join(RESULTS_DIR,"files",'CCLE-event_psi-EX-low_prolif.tsv.gz'),
        genexpr_low_prolif = os.path.join(RESULTS_DIR,"files","CCLE-genexpr_tpm-low_prolif.tsv.gz"),
        splicing_high_prolif = os.path.join(RESULTS_DIR,"files",'CCLE-event_psi-EX-high_prolif.tsv.gz'),
        genexpr_high_prolif = os.path.join(RESULTS_DIR,"files","CCLE-genexpr_tpm-high_prolif.tsv.gz"),
        doublings = os.path.join(RESULTS_DIR,"files","CCLE-doubling_times.tsv.gz")
    run:
        import pandas as pd
        import numpy as np
        
        # load
        splicing = pd.read_table(input.splicing, index_col=0)
        genexpr = pd.read_table(input.genexpr, index_col=0)
        metadata = pd.read_table(input.metadata)
        events_oi = list(pd.read_table(input.events_oi, header=None)[0])
        tsherniak = pd.read_excel(input.tsherniak, sheet_name=0)
        ghandi = pd.read_excel(input.ghandi, sheet_name=1)
        mapping = pd.read_table(input.mapping)
        
        # prep
        ghandi = ghandi[["CCLE_ID","Doubling.Time.Calculated.hrs"]].dropna().copy()
        ghandi["CCLE_Name"] = ghandi["CCLE_ID"]
        ghandi["doubling_time_ghandi"] = ghandi["Doubling.Time.Calculated.hrs"]
        
        tsherniak = tsherniak[["Name","Doubling time (hrs)"]].dropna().copy()
        tsherniak["CCLE_Name"] = tsherniak["Name"]
        tsherniak["doubling_time_tsherniak"] = tsherniak["Doubling time (hrs)"]
        tsherniak.loc[tsherniak["doubling_time_tsherniak"].isin([">120hrs","> 100"]),"doubling_time_tsherniak"] = np.nan
        tsherniak["doubling_time_tsherniak"] = tsherniak["doubling_time_tsherniak"].astype(float)
        
        doublings = pd.merge(ghandi[["CCLE_Name","doubling_time_ghandi"]], tsherniak[["CCLE_Name","doubling_time_tsherniak"]],
                             on="CCLE_Name", how="outer")
        doublings["doubling_time"] = doublings[["doubling_time_tsherniak","doubling_time_ghandi"]].min(axis=1)
        
        # subset cell lines
        avail_cells_depmap = genexpr.columns
        avail_cells_names = metadata.loc[metadata["DepMap_ID"].isin(avail_cells_depmap),"CCLE_Name"]
        doublings = doublings.loc[
            doublings["CCLE_Name"].isin(avail_cells_names) & ~doublings["doubling_time"].isnull()
        ].copy()
        
        ## low proliferation
        thresh = doublings["doubling_time"].quantile(0.75)
        cell_names_oi = doublings.loc[doublings["doubling_time"] > thresh, "CCLE_Name"]
        cells_oi_slow = metadata.loc[metadata["CCLE_Name"].isin(cell_names_oi),"DepMap_ID"]
        
        # high proliferation
        thresh = doublings["doubling_time"].quantile(0.25)
        cell_names_oi = doublings.loc[doublings["doubling_time"] < thresh, "CCLE_Name"]
        cells_oi_fast = metadata.loc[metadata["CCLE_Name"].isin(cell_names_oi),"DepMap_ID"]
        
        # consider only prioritized exons
        genes_oi = list(mapping.loc[mapping["EVENT"].isin(events_oi),"ENSEMBL"].unique())
        splicing = splicing.loc[events_oi].copy()
        genexpr = genexpr.loc[genes_oi].copy()
        
        # save
        splicing[cells_oi_slow].reset_index().to_csv(output.splicing_low_prolif, **SAVE_PARAMS)
        genexpr[cells_oi_slow].reset_index().to_csv(output.genexpr_low_prolif, **SAVE_PARAMS)
        splicing[cells_oi_fast].reset_index().to_csv(output.splicing_high_prolif, **SAVE_PARAMS)
        genexpr[cells_oi_fast].reset_index().to_csv(output.genexpr_high_prolif, **SAVE_PARAMS)
        doublings.to_csv(output.doublings, **SAVE_PARAMS)
        
        print("Done!")
        
        
rule model_gene_dependency_subsetted:
    input:
        splicing_file = os.path.join(RESULTS_DIR,"files",'CCLE-event_psi-EX-{prolif_type}.tsv.gz'),
        genexpr_file = os.path.join(RESULTS_DIR,"files","CCLE-genexpr_tpm-{prolif_type}.tsv.gz"),
        gene_dependency_file = os.path.join(PREP_DIR,'demeter2','CCLE.tsv.gz'),
        isoform_stats = os.path.join(PREP_DIR,'stats','CCLE.tsv.gz'),
        mapping_file = os.path.join(RAW_DIR,'VastDB','event_annotation-Hs2.tsv.gz')
    output:
        directory(os.path.join(RESULTS_DIR,'files','models_gene_dependency-{prolif_type}-EX'))
    threads: 10
    resources:
        runtime = 3600*12, # 12h
        memory = 50
    params:
        script_dir = TS_DIR,
        n_iterations = 1000
    shell:
        """
        export MKL_NUM_THREADS="1"
        export OMP_NUM_THREADS="1"
        
        nice python {params.script_dir}/target_spotter spldep_fit \
                    --gene_dependency_file={input.gene_dependency_file} \
                    --splicing_file={input.splicing_file} \
                    --genexpr_file={input.genexpr_file} \
                    --mapping_file={input.mapping_file} \
                    --output_dir={output} \
                    --n_iterations={params.n_iterations} \
                    --n_jobs={threads} \
                    --log_transform
        """

        
rule compute_splicing_dependency_subsetted:
    input:
        psi = os.path.join(PREP_DIR,"event_psi","inhouse-EX.tsv.gz"),
        genexpr = os.path.join(PREP_DIR,"genexpr_tpm","inhouse.tsv.gz"),
        coefs_dir = os.path.join(RESULTS_DIR,'files','models_gene_dependency-{prolif_type}-EX')
    output:
        directory(os.path.join(RESULTS_DIR,'files','splicing_dependency-{prolif_type}-EX'))
    threads: 10
    resources:
        runtime = 3600*6, # h
        memory = 20 # GB
    params:
        script_dir = TS_DIR
    shell:
        """
        nice python {params.script_dir}/target_spotter spldep_predict \
                    --splicing_file={input.psi} \
                    --genexpr_file={input.genexpr} \
                    --isoform_stats={input.coefs_dir}/isoform_stats.tsv.gz \
                    --coefs_splicing_file={input.coefs_dir}/coefs_splicing.pickle.gz \
                    --coefs_genexpr_file={input.coefs_dir}/coefs_genexpr.pickle.gz \
                    --coefs_intercept_file={input.coefs_dir}/coefs_intercept.pickle.gz \
                    --output_dir={output} \
                    --n_jobs={threads} \
                    --log_transform
        """
        
rule download_ensembl_proteoform_info:
    output:
        domains = os.path.join(RESULTS_DIR,'files','proteoform_info',"domains.tsv.gz"),
        exons = os.path.join(RESULTS_DIR,'files','proteoform_info',"exons.tsv.gz")
    run:
        import pandas as pd
        
        proteins_oi = [
            "ENSP00000446855",
            "ENSP00000256078",
            "ENSP00000392142",
            "ENSP00000282441",
            "ENSP00000413625",
            "ENSP00000371532",
            "ENSP00000413644",
            "ENSP00000245544"
        ]
        
        # get protein domain info
        print("Downloading domain info...")
        domains = []
        for p in proteins_oi:
            print(p)
            try:
                info = pd.read_json("https://rest.ensembl.org/overlap/translation/{p}?content-type=application/json;feature=protein_feature".format(p=p))
                domains.append(info)
            except:
                print("Skipping")
                continue
        domains = pd.concat(domains)
        
        # get exon coordinates on proteoform
        print("Downloading exon info...")
        exons = []
        for p in proteins_oi:
            print(p)
            try:
                info = pd.read_json("https://rest.ensembl.org/overlap/translation/{p}?content-type=application/json;feature=translation_exon".format(p=p))
                exons.append(info)
            except:
                print("Skipping")
                continue
        exons = pd.concat(exons)
        
        # save
        domains.to_csv(output.domains, **SAVE_PARAMS)
        exons.to_csv(output.exons, **SAVE_PARAMS)
        
        print("Done!")
    
    
rule figures_selection_exons_to_validate:
    input:
        annotation = os.path.join(RAW_DIR,'VastDB','event_annotation-Hs2.tsv.gz'),
        event_info = os.path.join(RAW_DIR,'VastDB','EVENT_INFO-hg38_noseqs.tsv'),
        protein_impact = os.path.join(ROOT,"data","raw","VastDB","PROT_IMPACT-hg38-v3.tab.gz"),
        ccle_spldep = os.path.join(CCLE_DIR,'files','splicing_dependency-EX','mean.tsv.gz'),
        ccle_genexpr = os.path.join(PREP_DIR,"genexpr_tpm","CCLE.tsv.gz"),
        ccle_splicing = os.path.join(PREP_DIR,"event_psi","CCLE-EX.tsv.gz"),
        ccle_stats = os.path.join(PREP_DIR,"stats","CCLE.tsv.gz"),
        ccle_metadata = os.path.join(PREP_DIR,"metadata","CCLE.tsv.gz"),
        selected_events = os.path.join(CCLE_DIR,'files','selected_models-EX.txt'),
        diff_result_sample = os.path.join(TCGA_DIR,'files','PANCAN','mannwhitneyu-PrimaryTumor_vs_SolidTissueNormal-EX.tsv.gz'),
        spldep_stats = os.path.join(TCGA_DIR,'files','PANCAN','summary_splicing_dependency-EX.tsv.gz'),
        diff_result_subtypes = os.path.join(TCGA_DIR,'files','PANCAN_subtypes','mannwhitneyu-PrimaryTumor_vs_SolidTissueNormal-EX.tsv.gz'),
        spldep_stats_subtypes = os.path.join(TCGA_DIR,'files','PANCAN_subtypes','summary_splicing_dependency-EX.tsv.gz'),
        available_cells = os.path.join(SUPPORT_DIR,"available_cancer_cells.tsv"),
        inhouse_splicing = os.path.join(PREP_DIR,"event_psi","inhouse-EX.tsv.gz"),
        inhouse_genexpr = os.path.join(PREP_DIR,"genexpr_tpm","inhouse.tsv.gz"),
        inhouse_spldep = os.path.join(RESULTS_DIR,"files","splicing_dependency-EX"),
        inhouse_spldep_low_prolif = os.path.join(RESULTS_DIR,"files","splicing_dependency-low_prolif-EX"),
        inhouse_spldep_high_prolif = os.path.join(RESULTS_DIR,"files","splicing_dependency-high_prolif-EX")
    output:
        directory(os.path.join(RESULTS_DIR,'figures','selection_exons_to_validate'))
    shell:
        """
        Rscript scripts/figures_selection_exons_to_validate.R \
                    --annotation_file={input.annotation} \
                    --event_info_file={input.event_info} \
                    --protein_impact_file={input.protein_impact} \
                    --ccle_spldep_file={input.ccle_spldep} \
                    --ccle_genexpr_file={input.ccle_genexpr} \
                    --ccle_splicing_file={input.ccle_splicing} \
                    --ccle_stats_file={input.ccle_stats} \
                    --ccle_metadata_file={input.ccle_metadata} \
                    --selected_events_file={input.selected_events} \
                    --diff_result_sample_file={input.diff_result_sample} \
                    --spldep_stats_file={input.spldep_stats} \
                    --diff_result_subtypes_file={input.diff_result_subtypes} \
                    --spldep_stats_subtypes_file={input.spldep_stats_subtypes} \
                    --available_cells_file={input.available_cells} \
                    --inhouse_splicing_file={input.inhouse_splicing} \
                    --inhouse_genexpr_file={input.inhouse_genexpr} \
                    --inhouse_spldep_file={input.inhouse_spldep}/mean.tsv.gz \
                    --inhouse_spldep_low_prolif_file={input.inhouse_spldep_low_prolif}/mean.tsv.gz \
                    --inhouse_spldep_high_prolif_file={input.inhouse_spldep_high_prolif}/mean.tsv.gz \
                    --figs_dir={output}
        """
        
        
rule figures_validation:
    input:
        annotation = os.path.join(RAW_DIR,'VastDB','event_annotation-Hs2.tsv.gz'),
        event_info = os.path.join(RAW_DIR,'VastDB','EVENT_INFO-hg38_noseqs.tsv'),
        splicing = os.path.join(PREP_DIR,"genexpr_tpm","inhouse.tsv.gz"),
        genexpr = os.path.join(PREP_DIR,"genexpr_tpm","CCLE.tsv.gz"),
        spldep = os.path.join(RESULTS_DIR,"files","splicing_dependency-EX"),
        validation_splicing = os.path.join(RAW_DIR,"experiments","validation_therapeutic_potential","20230215-psi-aso.tsv"),
        validation_od = os.path.join(RAW_DIR,"experiments","validation_therapeutic_potential","clonogenic_assay-od-merged.tsv"),
        prolif = os.path.join(RAW_DIR,"experiments","validation_therapeutic_potential","resazurin_cell_proliferation-merged.tsv")
    output:
        directory(os.path.join(RESULTS_DIR,'figures','validation'))
    shell:
        """
        Rscript scripts/figures_validation.R \
                    --annotation_file={input.annotation} \
                    --event_info_file={input.event_info} \
                    --validation_splicing_file={input.validation_splicing} \
                    --splicing_file={input.splicing} \
                    --genexpr_file={input.genexpr} \
                    --spldep_file={input.spldep}/mean.tsv.gz \
                    --validation_splicing_file={input.validation_splicing} \
                    --validation_od_file={input.validation_od} \
                    --prolif_file={input.prolif} \
                    --figs_dir={output}
        """

        
rule figures_structures_validated_exons:
    input:
        pdb = lambda wildcards: PDB_FILES[wildcards.gene_oi],
        exon_info = os.path.join(SUPPORT_DIR,"exon_mapping_validated_exons.tsv"),
    params:
        gene_oi = "{gene_oi}",
        yasara_path = YASARA_PATH
    output:
        directory(os.path.join(RESULTS_DIR,"figures","structures_validated_exons","{gene_oi}"))
    shell:
        """
        python scripts/figure_structure_validated_exon.py \
                    --pdb_file={input.pdb} \
                    --exon_info_file={input.exon_info} \
                    --gene_oi={params.gene_oi} \
                    --yasara_path={params.yasara_path} \
                    --figs_dir={output}
        """
        
