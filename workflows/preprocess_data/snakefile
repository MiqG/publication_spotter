"""
Author: Miquel Anglada Girotto
Contact: miquelangladagirotto [at] gmail [dot] com
Last Update: 2021-01-12

Workflow purpose
--------------
Preprocess raw data.

Outline
-------

"""

import os

# variables
ROOT = os.path.dirname(os.path.dirname(os.getcwd()))
RAW_DIR = os.path.join(ROOT,'data','raw')
SRC_DIR = os.path.join(ROOT,'src')
PREP_DIR = os.path.join(ROOT,'data','prep')

EVENT_TYPES = ['EX','ALTA','ALTD','INT']
CANCER_TYPES = [
    'BRCA',
    'COAD',
    'GBM',
    'HNSC',
    'KICH',
    'KIRC',
    'KIRP',
    'LGG',
    'LIHC',
    'LUAD',
    'LUSC',
    'PRAD',
    'READ',
    'THCA',
    'UCEC',
    'UCS'
]

DEPMAP_RAW = {
    'demeter2': os.path.join(RAW_DIR,'DepMap','demeter2','D2_combined_gene_dep_scores.csv'),
    #'genexpr_tpm': os.path.join(RAW_DIR,'DepMap','achilles_ccle','CCLE_expression_transposed.tsv.gz')
}

# get treatment file paths
TREATMENT_FILES = {}
for c in CANCER_TYPES:
    clinical_dir = os.path.join(RAW_DIR,'GDC','TCGA-%s','harmonized','Clinical','Clinical_Supplement') % c
    for d in os.listdir(clinical_dir):
        f = os.listdir(os.path.join(clinical_dir,d))[0]
        if 'drug' in f:
            treatment_file = os.path.join(clinical_dir,d,f)
            TREATMENT_FILES[c]=treatment_file
            
##### RULES #####
rule all:
    input:
        # preprocess CCLE
        ## metadata
        os.path.join(PREP_DIR,'metadata','CCLE.tsv.gz'),
        ## PSI
        expand(os.path.join(PREP_DIR,'event_psi','CCLE-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        ## gene expression
        os.path.join(PREP_DIR,'genexpr_tpm','CCLE.tsv.gz'),

        # preprocess DepMap data
        expand(os.path.join(PREP_DIR,'{dataset}','CCLE.tsv.gz'), dataset=['demeter2']),

        # impute CCLE PSI matrix
        expand(os.path.join(PREP_DIR,'event_psi_imputed','CCLE-{event_type}.tsv.gz'), event_type=EVENT_TYPES),

        # impute RNAi matrix
        os.path.join(PREP_DIR,'demeter2_imputed','CCLE.tsv.gz'),

        # impute TCGA PSI matrices
        expand(os.path.join(PREP_DIR,'event_psi_imputed','{cancer}.tsv.gz'), cancer=CANCER_TYPES),

        # compute transcriptome indices
        os.path.join(PREP_DIR,'transcriptome_indices','CCLE.tsv.gz'),

        # count mutation frequency on genes
        os.path.join(PREP_DIR,'gene_mutation_freq','CCLE.tsv.gz'),

        # count mutation frequency on exons
        os.path.join(PREP_DIR,'references','EVENT_INFO-hg19_noseqs-wmargins.tsv'),
        expand(os.path.join(PREP_DIR,'event_snv','CCLE-{event_type}.tsv.gz'), event_type=['EX']),
        expand(os.path.join(PREP_DIR,'event_mutation_freq','CCLE-{event_type}.tsv.gz'), event_type=['EX']),
        
        # Thomas 2020
        os.path.join(PREP_DIR,'Thomas2020','crispr_screen.tsv.gz'),

        # merge metadata TCGA
        os.path.join(PREP_DIR,'metadata','PANCAN.tsv.gz'),

        # Moiso 2021
        os.path.join(PREP_DIR,'Moiso2021','drug_response.tsv.gz'),
        
        # split GDSC platforms
        os.path.join(PREP_DIR,'drug_screens','GDSC1.tsv.gz'),
        os.path.join(PREP_DIR,'drug_screens','GDSC2.tsv.gz'),
        
        # preprocess TCGA
        ## harmonize names drug treatments
        expand(os.path.join(PREP_DIR,'drug_treatments','{cancer}.tsv.gz'), cancer=CANCER_TYPES)
        
        
rule prepare_metadata_ccle:
    input:
        sample_info = os.path.join(RAW_DIR,'DepMap','achilles_ccle','sample_info.csv'),
        ccle_cancertypes = os.path.join(RAW_DIR,'articles','Yu2019','ccle_metadata.xls'),
        sample_annotation = os.path.join(RAW_DIR,'CCLE','ENA_filereport-PRJNA523380-CCLE.tsv')
    output:
        os.path.join(PREP_DIR,'metadata','CCLE.tsv.gz')
    params:
        dataset = 'metadata'
    shell:
        """
        python scripts/preprocess_ccle.py \
                    --dataset={params.dataset} \
                    --sample_info_file={input.sample_info} \
                    --ccle_cancer_types_file={input.ccle_cancertypes} \
                    --sample_annot_file={input.sample_annotation} \
                    --output_file={output}
        """


rule preprocess_psi_ccle:
    input:
        psi_file = os.path.join(RAW_DIR,'CCLE','vast_out','PSI-minN_1-minSD_0-noVLOW-min_ALT_use25-Tidy.tab.gz'),
        metadata_file = os.path.join(PREP_DIR,'metadata','CCLE.tsv.gz')
    output:
        os.path.join(PREP_DIR,'event_psi','CCLE-{event_type}.tsv.gz')
    params:
        dataset = 'event_psi',
        event_type = '{event_type}',
    shell:
        """
        python scripts/preprocess_ccle.py \
                    --dataset={params.dataset} \
                    --event_type={params.event_type} \
                    --mat_file={input.psi_file} \
                    --metadata_file={input.metadata_file} \
                    --output_file={output} \
        """
        

rule preprocess_tpm_ccle:
    input:
        tpm_file = os.path.join(RAW_DIR,'CCLE','vast_out','TPM-hg38-1019.tab.gz'),
        metadata_file = os.path.join(PREP_DIR,'metadata','CCLE.tsv.gz')
    output:
        os.path.join(PREP_DIR,'genexpr_tpm','CCLE.tsv.gz')
    params:
        dataset = 'genexpr_tpm'
    shell:
        """
        python scripts/preprocess_ccle.py \
                    --dataset={params.dataset} \
                    --mat_file={input.tpm_file} \
                    --metadata_file={input.metadata_file} \
                    --output_file={output} \
        """


rule preprocess_depmap:
    input:
        lambda wildcards: DEPMAP_RAW[wildcards.dataset]
    output:
        os.path.join(PREP_DIR,'{dataset}','CCLE.tsv.gz')
    params:
        metadata_file = os.path.join(RAW_DIR,'DepMap','achilles_ccle','sample_info.csv')
    shell:
        """
        python scripts/preprocess_achilles.py \
                    --raw_achilles_file={input} \
                    --raw_metadata_file={params.metadata_file} \
                    --prep_achilles_file={output}
        """

        
rule impute_psi_ccle:
    input:
        os.path.join(PREP_DIR,'event_psi','CCLE-{event_type}.tsv.gz')
    output:
        os.path.join(PREP_DIR,'event_psi_imputed','CCLE-{event_type}.tsv.gz')
    params:
        script_dir=os.path.join(SRC_DIR,'python'),
        method = 'knn',
        method_kws = '\'{"n_neighbors":5}\'',
        features_as_rows = True
    shell:
        """
        python {params.script_dir}/impute_nan.py \
                    --input_file={input} \
                    --output_file={output} \
                    --method={params.method} \
                    --method_kws={params.method_kws} \
                    --features_as_rows={params.features_as_rows}
        """
    

rule impute_rnai_ccle:
    input:
        os.path.join(PREP_DIR,'demeter2','CCLE.tsv.gz')
    output:
        os.path.join(PREP_DIR,'demeter2_imputed','CCLE.tsv.gz')
    params:
        script_dir=os.path.join(SRC_DIR,'python'),
        method = 'knn',
        method_kws = '\'{"n_neighbors":5}\'',
        features_as_rows = True
    shell:
        """
        python {params.script_dir}/impute_nan.py \
                    --input_file={input} \
                    --output_file={output} \
                    --method={params.method} \
                    --method_kws={params.method_kws} \
                    --features_as_rows={params.features_as_rows}
        """


rule impute_psi_tcga:
    input:
        os.path.join(PREP_DIR,'event_psi','{cancer}.tsv')
    output:
        os.path.join(PREP_DIR,'event_psi_imputed','{cancer}.tsv.gz')
    params:
        script_dir=os.path.join(SRC_DIR,'python'),
        method = 'knn',
        method_kws = '\'{"n_neighbors":5}\'',
        features_as_rows = True
    shell:
        """
        python {params.script_dir}/impute_nan.py \
                    --input_file={input} \
                    --output_file={output} \
                    --method={params.method} \
                    --method_kws={params.method_kws} \
                    --features_as_rows={params.features_as_rows}
        """
        
        
rule compute_transcriptome_indices_ccle:
    input:
        genexpr = os.path.join(PREP_DIR,'genexpr_tpm','CCLE.tsv.gz'),
        annotation = os.path.join(RAW_DIR,'VastDB','event_annotation-Hs2.tsv.gz')
    output:
        os.path.join(PREP_DIR,'transcriptome_indices','CCLE.tsv.gz')
    params:
        translate_from = 'ENSEMBL',
        translate_to = 'GENE'
    shell:
        """
        python scripts/TranscriptomeIndices.py \
                        --genexpr_file={input.genexpr} \
                        --output_file={output} \
                        --annotation_file={input.annotation} \
                        --translate_from={params.translate_from} \
                        --translate_to={params.translate_to}
        """
        
        
rule mutation_frequency:
    input:
        snv = os.path.join(RAW_DIR,'DepMap','achilles_ccle','CCLE_mutations.csv'),
        annotation = os.path.join(RAW_DIR,'ENSEMBL','gene_annotation-hg19.tsv.gz')
    output:
        os.path.join(PREP_DIR,'gene_mutation_freq','CCLE.tsv.gz')
    params:
        id_col = 'DepMap_ID',
        gene_col = 'Hugo_Symbol',
        effect_col = 'Variant_Classification'
    shell:
        """
        python scripts/count_mutations_per_gene_and_variant.py \
                    --snv_file={input.snv} \
                    --annotation_file={input.annotation} \
                    --id_col={params.id_col} \
                    --gene_col={params.gene_col} \
                    --effect_col={params.effect_col} \
                    --output_file={output}
        """
        
        
rule redefine_exons_vastdb:
    input:
        os.path.join(RAW_DIR,'VastDB','EVENT_INFO-hg19_noseqs.tsv')
    output:
        os.path.join(PREP_DIR,'references','EVENT_INFO-hg19_noseqs-wmargins.tsv')
    threads: 10
    shell:
        """
        python scripts/redefine_exons_vastdb.py \
                    --exon_info_file={input} \
                    --output_file={output} \
                    --n_jobs={threads}
        """
        
rule annotate_mutations_to_events:
    input:
        input_file = os.path.join(RAW_DIR,'DepMap','achilles_ccle','CCLE_mutations.csv'),
        exon_annotation = os.path.join(PREP_DIR,'references','EVENT_INFO-hg19_noseqs-wmargins.tsv')
    output:
        os.path.join(PREP_DIR,'event_snv','CCLE-{event_type}.tsv.gz')
    params:
        event_type = '{event_type}'
    shell:
        """
        Rscript scripts/annotate_mutations_to_exons.R \
                        --input_file={input.input_file} \
                        --output_file={output} \
                        --annotation_file={input.exon_annotation} \
                        --event_type={params.event_type}
        """
        
        
rule mutation_frequency_per_event:
    input:
        snv_event = os.path.join(PREP_DIR,'event_snv','CCLE-{event_type}.tsv.gz'),
        snv_gene = os.path.join(RAW_DIR,'DepMap','achilles_ccle','CCLE_mutations.csv'),
        annotation = os.path.join(RAW_DIR,'VastDB','EVENT_INFO-hg38_noseqs.tsv')
    output:
        os.path.join(PREP_DIR,'event_mutation_freq','CCLE-{event_type}.tsv.gz')
    params:
        id_col = 'DepMap_ID',
        gene_col = 'Hugo_Symbol',
        event_col = 'EVENT',
        effect_col = 'Variant_Classification'
    shell:
        """
        python scripts/count_mutations_per_event_and_variant.py \
                    --snv_event_file={input.snv_event} \
                    --snv_gene_file={input.snv_gene} \
                    --annotation_file={input.annotation} \
                    --id_col={params.id_col} \
                    --gene_col={params.gene_col} \
                    --event_col={params.event_col} \
                    --effect_col={params.effect_col} \
                    --output_file={output}
        """
        
        
rule prepare_thomas2020:
    input:
        screen = os.path.join(RAW_DIR,'articles','Thomas2020','crispr_screen.xlsx'),
        mapping = os.path.join(RAW_DIR,'articles','Thomas2020','event_mapping_vastdb.tsv')
    output:
        os.path.join(PREP_DIR,'Thomas2020','crispr_screen.tsv.gz')
    shell:
        """
        Rscript scripts/preprocess_Thomas2020.R \
                    --thomas_crispr_screen_file={input.screen} \
                    --thomas_event_mapping_file={input.mapping} \
                    --output_file={output}
        """


rule merge_tcga_metadata:
    input:
        metadata_files = [os.path.join(PREP_DIR,'metadata','%s.tsv' % cancer) 
                          for cancer in CANCER_TYPES]
    output:
        os.path.join(PREP_DIR,'metadata','PANCAN.tsv.gz')
    run:
        import pandas as pd
        metadata = []
        for f in input.metadata_files:
            df = pd.read_table(f)
            metadata.append(df)
            del df
        metadata = pd.concat(metadata)
        metadata.to_csv(output[0], sep='\t', index=False, compression='gzip')
    
    
rule prepare_moiso2021:
        input:
            metadata = os.path.join(PREP_DIR,'metadata','PANCAN.tsv.gz'),
            response = os.path.join(RAW_DIR,'articles','Moiso2021','drug_response_filtered.tsv')
        output:
            os.path.join(PREP_DIR,'Moiso2021','drug_response.tsv.gz')
        shell:
            """
            python scripts/preprocess_Moiso2021.py \
                        --metadata_file={input.metadata} \
                        --response_file={input.response} \
                        --output_file={output}
            """
            

rule harmonize_drug_treatments:
    input:
        treatments = lambda wildcards: TREATMENT_FILES[wildcards.cancer],
        correction = os.path.join(RAW_DIR,'articles','Spainhour2017','DrugCorrection.csv')
    output:
        os.path.join(PREP_DIR,'drug_treatments','{cancer}.tsv.gz')
    shell:
        """
        python scripts/preprocess_tcga_treatments.py \
                    --treatments_file={input.treatments} \
                    --drug_correction_file={input.correction} \
                    --output_file={output}
        """
        
        
rule preprocess_gdsc:
    input:
        os.path.join(RAW_DIR,'DepMap','gdsc','sanger-dose-response.csv')
    output:
        gdsc1 = os.path.join(PREP_DIR,'drug_screens','GDSC1.tsv.gz'),
        gdsc2 = os.path.join(PREP_DIR,'drug_screens','GDSC2.tsv.gz')
    run:
        import pandas as pd
        drug_response = pd.read_csv(input[0])
        # GDSC1
        idx = drug_response["DATASET"] == "GDSC1"
        drug_response.loc[idx].to_csv(output.gdsc1, sep='\t', index=False, compression="gzip")
        # GDSC2
        idx = drug_response["DATASET"] == "GDSC2"
        drug_response.loc[idx].to_csv(output.gdsc2, sep='\t', index=False, compression="gzip")
        
    