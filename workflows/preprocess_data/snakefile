"""
Author: Miquel Anglada Girotto
Contact: miquelangladagirotto [at] gmail [dot] com
Last Update: 2021-01-12

Workflow purpose
--------------
Preprocess raw data.

Outline
-------

"""

import os

# variables
ROOT = os.path.dirname(os.path.dirname(os.getcwd()))
RAW_DIR = os.path.join(ROOT,'data','raw')
SRC_DIR = os.path.join(ROOT,'src')
PREP_DIR = os.path.join(ROOT,'data','prep')
SUPPORT_DIR = os.path.join(ROOT,'support')

EVENT_TYPES = ['EX','ALTA','ALTD','INT']
CANCER_TYPES = [
    'BRCA',
    'COAD',
    'GBM',
    'HNSC',
    'KICH',
    'KIRC',
    'KIRP',
    'LGG',
    'LIHC',
    'LUAD',
    'LUSC',
    'PRAD',
    'READ',
    'THCA',
    'UCEC',
    'UCS'
]

SAVE_PARAMS = {'sep':'\t', 'index':False, 'compression':'gzip'}

DEPMAP_RAW = {
    'demeter2': os.path.join(RAW_DIR,'DepMap','demeter2','D2_combined_gene_dep_scores.csv'),
    'achilles': os.path.join(RAW_DIR,'DepMap','achilles_ccle','Achilles_gene_effect_transposed.tsv.gz')
    #'genexpr_tpm': os.path.join(RAW_DIR,'DepMap','achilles_ccle','CCLE_expression_transposed.tsv.gz')
}

# get treatment file paths
TREATMENT_FILES = {}
for c in CANCER_TYPES:
    clinical_dir = os.path.join(RAW_DIR,'GDC','TCGA-%s','harmonized','Clinical','Clinical_Supplement') % c
    for d in os.listdir(clinical_dir):
        f = os.listdir(os.path.join(clinical_dir,d))[0]
        if 'drug' in f:
            treatment_file = os.path.join(clinical_dir,d,f)
            TREATMENT_FILES[c]=treatment_file
            
##### RULES #####
rule all:
    input:
        os.path.join(PREP_DIR,'drug_screens','drug_targets.tsv.gz'),
        # preprocess CCLE
        ## metadata
        os.path.join(PREP_DIR,'metadata','CCLE.tsv.gz'),
        # ## PSI
        # expand(os.path.join(PREP_DIR,'event_psi','CCLE-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        ## gene expression
        os.path.join(PREP_DIR,'genexpr_tpm','CCLE.tsv.gz'),
        
        # preprocess DepMap data
        expand(os.path.join(PREP_DIR,'{dataset}','CCLE.tsv.gz'), dataset=DEPMAP_RAW.keys()),

        # # impute CCLE PSI matrix
        # expand(os.path.join(PREP_DIR,'event_psi_imputed','CCLE-{event_type}.tsv.gz'), event_type=EVENT_TYPES),

        # # impute RNAi matrix
        # os.path.join(PREP_DIR,'demeter2_imputed','CCLE.tsv.gz'),

        # # impute TCGA PSI matrices
        # expand(os.path.join(PREP_DIR,'event_psi_imputed','{cancer}.tsv.gz'), cancer=CANCER_TYPES),

        # # compute transcriptome indices
        # os.path.join(PREP_DIR,'transcriptome_indices','CCLE.tsv.gz'),

        # # count mutation frequency on genes
        # os.path.join(PREP_DIR,'gene_mutation_freq','CCLE.tsv.gz'),

        # # count mutation frequency on exons
        # os.path.join(PREP_DIR,'references','EVENT_INFO-hg19_noseqs-wmargins.tsv'),
        # expand(os.path.join(PREP_DIR,'event_snv','CCLE-{event_type}.tsv.gz'), event_type=['EX']),
        # expand(os.path.join(PREP_DIR,'event_mutation_freq','CCLE-{event_type}.tsv.gz'), event_type=['EX']),

        # # Thomas 2020
        # os.path.join(PREP_DIR,'Thomas2020','crispr_screen.tsv.gz'),

        # # merge metadata TCGA
        # os.path.join(PREP_DIR,'metadata','PANCAN.tsv.gz'),

        # # Moiso 2021
        # os.path.join(PREP_DIR,'Moiso2021','drug_response.tsv.gz'),

        # split GDSC platforms
        os.path.join(PREP_DIR,'drug_screens','train','GDSC1.tsv.gz'),
        os.path.join(PREP_DIR,'drug_screens','train','GDSC2.tsv.gz'),
        os.path.join(PREP_DIR,'drug_screens','test','GDSC1.tsv.gz'),
        os.path.join(PREP_DIR,'drug_screens','test','GDSC2.tsv.gz'),

        # # preprocess TCGA
        # ## harmonize names drug treatments
        # expand(os.path.join(PREP_DIR,'drug_treatments','{cancer}.tsv.gz'), cancer=CANCER_TYPES),
        # os.path.join(PREP_DIR,'drug_treatments','PANCAN.tsv.gz'),

        # ## clinically relevant subtypes
        # expand(os.path.join(PREP_DIR,'metadata','{cancer}_subtypes.tsv'), cancer=CANCER_TYPES),

        # # merge metadata TCGA
        # os.path.join(PREP_DIR,'metadata','PANCAN_subtypes.tsv.gz'),

        # # preprocess STRINGDB
        # os.path.join(PREP_DIR,'ppi','STRINGDB.tsv.gz'),

        # # preprocess GDSC drug targets
        
        # preprocess ENCORE
        os.path.join(PREP_DIR,'metadata','ENCORE.tsv.gz'),
        os.path.join(PREP_DIR,'event_psi','ENCORE-EX.tsv.gz'),
        os.path.join(PREP_DIR,'event_psi','ENCORE-ALTA.tsv.gz'),
        os.path.join(PREP_DIR,'event_psi','ENCORE-ALTD.tsv.gz'),
        os.path.join(PREP_DIR,'event_psi','ENCORE-INT.tsv.gz'),
        os.path.join(PREP_DIR,'genexpr_tpm','ENCORE.tsv.gz'),
        
        # compute transcriptome indices TCGA
        expand(os.path.join(PREP_DIR,'transcriptome_indices','{cancer}.tsv.gz'), cancer=CANCER_TYPES),
        
        # make Achilles comparable to Demeter2
        os.path.join(PREP_DIR,"achilles","CCLE_comparable.tsv.gz"),
        
        # make COSMIC gene set
        os.path.join(PREP_DIR,"gene_sets","cancer_gene_census.txt")
        
        
rule prepare_metadata_ccle:
    input:
        sample_info = os.path.join(RAW_DIR,'DepMap','achilles_ccle','sample_info.csv'),
        ccle_cancertypes = os.path.join(RAW_DIR,'articles','Yu2019','ccle_metadata.xls'),
        sample_annotation = os.path.join(RAW_DIR,'CCLE','ENA_filereport-PRJNA523380-CCLE.tsv')
    output:
        os.path.join(PREP_DIR,'metadata','CCLE.tsv.gz')
    params:
        dataset = 'metadata'
    shell:
        """
        python scripts/preprocess_ccle.py \
                    --dataset={params.dataset} \
                    --sample_info_file={input.sample_info} \
                    --ccle_cancer_types_file={input.ccle_cancertypes} \
                    --sample_annot_file={input.sample_annotation} \
                    --output_file={output}
        """


rule preprocess_psi_ccle:
    input:
        psi_file = os.path.join(RAW_DIR,'CCLE','vast_out','PSI-minN_1-minSD_0-noVLOW-min_ALT_use25-Tidy.tab.gz'),
        metadata_file = os.path.join(PREP_DIR,'metadata','CCLE.tsv.gz')
    output:
        os.path.join(PREP_DIR,'event_psi','CCLE-{event_type}.tsv.gz')
    params:
        dataset = 'event_psi',
        event_type = '{event_type}',
    shell:
        """
        python scripts/preprocess_ccle.py \
                    --dataset={params.dataset} \
                    --event_type={params.event_type} \
                    --mat_file={input.psi_file} \
                    --metadata_file={input.metadata_file} \
                    --output_file={output} \
        """
        
        
rule preprocess_genexpr_ccle:
    input:
        genexpr = os.path.join(RAW_DIR,'CCLE','vast_out','TPM-hg38-1019.tab.gz'),
        metadata = os.path.join(PREP_DIR,'metadata','CCLE.tsv.gz')
    output:
        genexpr = os.path.join(PREP_DIR,'genexpr_tpm','CCLE.tsv.gz')
    params:
        dataset = 'genexpr_vast'
    shell:
        """
        python scripts/preprocess_ccle.py \
                    --dataset={params.dataset} \
                    --mat_file={input.genexpr} \
                    --metadata_file={input.metadata} \
                    --output_file={output.genexpr}
        """


# rule preprocess_genexpr_ccle:
#     input:
#         counts = os.path.join(RAW_DIR,'CCLE','STAR','merged_counts.tab.gz'),
#         metadata = os.path.join(PREP_DIR,'metadata','CCLE.tsv.gz')
#     output:
#         counts = os.path.join(PREP_DIR,'genexpr_counts','CCLE.tsv.gz')
#     params:
#         dataset = 'genexpr_counts'
#     shell:
#         """
#         python scripts/preprocess_ccle.py \
#                     --dataset={params.dataset} \
#                     --mat_file={input.counts} \
#                     --metadata_file={input.metadata} \
#                     --output_file={output.counts}
#         """

        
# rule compute_genexpr_tpm_ccle:
#     input:
#         counts = os.path.join(PREP_DIR,'genexpr_counts','CCLE.tsv.gz'),
#         gene_info = os.path.join(RAW_DIR,'GENCODE','gene_lengths_hg38.tsv.gz')
#     output:
#         tpm = os.path.join(PREP_DIR,'genexpr_tpm','CCLE.tsv.gz')
#     params:
#         method="TPM",
#         geneid_col = "gene",
#         genelen_col="length"
#     shell:
#         """
#         python scripts/normalize_rnaseq.py \
#                     --method={params.method} \
#                     --counts_file={input.counts} \
#                     --gene_info_file={input.gene_info} \
#                     --geneid_col={params.geneid_col} \
#                     --genelen_col={params.genelen_col} \
#                     --output_file={output.tpm}
#         """

rule preprocess_depmap:
    input:
        lambda wildcards: DEPMAP_RAW[wildcards.dataset]
    output:
        os.path.join(PREP_DIR,'{dataset}','CCLE.tsv.gz')
    params:
        metadata_file = os.path.join(RAW_DIR,'DepMap','achilles_ccle','sample_info.csv')
    shell:
        """
        python scripts/preprocess_depmap.py \
                    --raw_achilles_file={input} \
                    --raw_metadata_file={params.metadata_file} \
                    --prep_achilles_file={output}
        """

        
rule impute_psi_ccle:
    input:
        os.path.join(PREP_DIR,'event_psi','CCLE-{event_type}.tsv.gz')
    output:
        os.path.join(PREP_DIR,'event_psi_imputed','CCLE-{event_type}.tsv.gz')
    params:
        script_dir=os.path.join(SRC_DIR,'python'),
        method = 'knn',
        method_kws = '\'{"n_neighbors":5}\'',
        features_as_rows = True
    shell:
        """
        python {params.script_dir}/impute_nan.py \
                    --input_file={input} \
                    --output_file={output} \
                    --method={params.method} \
                    --method_kws={params.method_kws} \
                    --features_as_rows={params.features_as_rows}
        """
    

rule impute_rnai_ccle:
    input:
        os.path.join(PREP_DIR,'demeter2','CCLE.tsv.gz')
    output:
        os.path.join(PREP_DIR,'demeter2_imputed','CCLE.tsv.gz')
    params:
        script_dir=os.path.join(SRC_DIR,'python'),
        method = 'knn',
        method_kws = '\'{"n_neighbors":5}\'',
        features_as_rows = True
    shell:
        """
        python {params.script_dir}/impute_nan.py \
                    --input_file={input} \
                    --output_file={output} \
                    --method={params.method} \
                    --method_kws={params.method_kws} \
                    --features_as_rows={params.features_as_rows}
        """


rule impute_psi_tcga:
    input:
        os.path.join(PREP_DIR,'event_psi','{cancer}.tsv')
    output:
        os.path.join(PREP_DIR,'event_psi_imputed','{cancer}.tsv.gz')
    params:
        script_dir=os.path.join(SRC_DIR,'python'),
        method = 'knn',
        method_kws = '\'{"n_neighbors":5}\'',
        features_as_rows = True
    shell:
        """
        python {params.script_dir}/impute_nan.py \
                    --input_file={input} \
                    --output_file={output} \
                    --method={params.method} \
                    --method_kws={params.method_kws} \
                    --features_as_rows={params.features_as_rows}
        """
        
        
rule compute_transcriptome_indices_ccle:
    input:
        genexpr = os.path.join(PREP_DIR,'genexpr_tpm','CCLE.tsv.gz'),
        annotation = os.path.join(RAW_DIR,'VastDB','event_annotation-Hs2.tsv.gz')
    output:
        os.path.join(PREP_DIR,'transcriptome_indices','CCLE.tsv.gz')
    params:
        translate_from = 'ENSEMBL',
        translate_to = 'GENE'
    shell:
        """
        python scripts/TranscriptomeIndices.py \
                        --genexpr_file={input.genexpr} \
                        --output_file={output} \
                        --annotation_file={input.annotation} \
                        --translate_from={params.translate_from} \
                        --translate_to={params.translate_to}
        """
        
        
rule compute_transcriptome_indices_tcga:
    input:
        genexpr_file = os.path.join(PREP_DIR,'gene_counts','{cancer}.tsv'),
        annotation_file = os.path.join(RAW_DIR,'VastDB','event_annotation-Hs2.tsv.gz'),
        gene_lengths = os.path.join(RAW_DIR,'VastDB','assemblies','Hs2','EXPRESSION','Hs2_mRNA-50-SS.eff')
    output:
        os.path.join(PREP_DIR,'transcriptome_indices','{cancer}.tsv.gz')
    params:
        translate_from = 'ENSEMBL',
        translate_to = 'GENE'
    shell:
        """
        nice python scripts/TranscriptomeIndices.py \
                        --genexpr_file={input.genexpr_file} \
                        --annotation_file={input.annotation_file} \
                        --translate_from={params.translate_from} \
                        --translate_to={params.translate_to} \
                        --output_file={output} \
                        --normalize_counts \
                        --gene_lengths_file={input.gene_lengths}
        """
        
        
rule mutation_frequency:
    input:
        snv = os.path.join(RAW_DIR,'DepMap','achilles_ccle','CCLE_mutations.csv'),
        annotation = os.path.join(RAW_DIR,'ENSEMBL','gene_annotation-hg19.tsv.gz')
    output:
        os.path.join(PREP_DIR,'gene_mutation_freq','CCLE.tsv.gz')
    params:
        id_col = 'DepMap_ID',
        gene_col = 'Hugo_Symbol',
        effect_col = 'Variant_Classification'
    shell:
        """
        python scripts/count_mutations_per_gene_and_variant.py \
                    --snv_file={input.snv} \
                    --annotation_file={input.annotation} \
                    --id_col={params.id_col} \
                    --gene_col={params.gene_col} \
                    --effect_col={params.effect_col} \
                    --output_file={output}
        """
        
        
rule redefine_exons_vastdb:
    input:
        os.path.join(RAW_DIR,'VastDB','EVENT_INFO-hg19_noseqs.tsv')
    output:
        os.path.join(PREP_DIR,'references','EVENT_INFO-hg19_noseqs-wmargins.tsv')
    threads: 10
    shell:
        """
        python scripts/redefine_exons_vastdb.py \
                    --exon_info_file={input} \
                    --output_file={output} \
                    --n_jobs={threads}
        """
        
        
rule annotate_mutations_to_events:
    input:
        input_file = os.path.join(RAW_DIR,'DepMap','achilles_ccle','CCLE_mutations.csv'),
        exon_annotation = os.path.join(PREP_DIR,'references','EVENT_INFO-hg19_noseqs-wmargins.tsv')
    output:
        os.path.join(PREP_DIR,'event_snv','CCLE-{event_type}.tsv.gz')
    params:
        event_type = '{event_type}'
    shell:
        """
        Rscript scripts/annotate_mutations_to_exons.R \
                        --input_file={input.input_file} \
                        --output_file={output} \
                        --annotation_file={input.exon_annotation} \
                        --event_type={params.event_type}
        """
        
        
rule mutation_frequency_per_event:
    input:
        snv_event = os.path.join(PREP_DIR,'event_snv','CCLE-{event_type}.tsv.gz'),
        snv_gene = os.path.join(RAW_DIR,'DepMap','achilles_ccle','CCLE_mutations.csv'),
        annot_events = os.path.join(RAW_DIR,'VastDB','EVENT_INFO-hg38_noseqs.tsv'),
        annot_genes = os.path.join(RAW_DIR,'ENSEMBL','gene_annotation-hg19.tsv.gz')
    output:
        os.path.join(PREP_DIR,'event_mutation_freq','CCLE-{event_type}.tsv.gz')
    params:
        id_col = 'DepMap_ID',
        event_col = 'EVENT',
        gene_col = 'Hugo_Symbol',
        effect_col = 'Variant_Classification'
    shell:
        """
        python scripts/count_mutations_per_event_and_variant.py \
                    --snv_event_file={input.snv_event} \
                    --snv_gene_file={input.snv_gene} \
                    --annot_events_file={input.annot_events} \
                    --annot_genes_file={input.annot_genes} \
                    --id_col={params.id_col} \
                    --event_col={params.event_col} \
                    --gene_col={params.gene_col} \
                    --effect_col={params.effect_col} \
                    --output_file={output}
        """
        
        
rule prepare_thomas2020:
    input:
        screen = os.path.join(RAW_DIR,'articles','Thomas2020','crispr_screen.xlsx'),
        mapping = os.path.join(RAW_DIR,'articles','Thomas2020','event_mapping_vastdb.tsv')
    output:
        os.path.join(PREP_DIR,'Thomas2020','crispr_screen.tsv.gz')
    shell:
        """
        Rscript scripts/preprocess_Thomas2020.R \
                    --thomas_crispr_screen_file={input.screen} \
                    --thomas_event_mapping_file={input.mapping} \
                    --output_file={output}
        """


rule merge_tcga_metadata:
    input:
        metadata_files = [os.path.join(PREP_DIR,'metadata','%s.tsv' % cancer) 
                          for cancer in CANCER_TYPES]
    output:
        os.path.join(PREP_DIR,'metadata','PANCAN.tsv.gz')
    run:
        import pandas as pd
        metadata = []
        for f in input.metadata_files:
            df = pd.read_table(f)
            metadata.append(df)
            del df
        metadata = pd.concat(metadata)
        metadata.to_csv(output[0], sep='\t', index=False, compression='gzip')
    
    
rule prepare_moiso2021:
        input:
            metadata = os.path.join(PREP_DIR,'metadata','PANCAN.tsv.gz'),
            response = os.path.join(RAW_DIR,'articles','Moiso2021','drug_response_filtered.tsv')
        output:
            os.path.join(PREP_DIR,'Moiso2021','drug_response.tsv.gz')
        shell:
            """
            python scripts/preprocess_Moiso2021.py \
                        --metadata_file={input.metadata} \
                        --response_file={input.response} \
                        --output_file={output}
            """
            

rule harmonize_drug_treatments:
    input:
        treatments = lambda wildcards: TREATMENT_FILES[wildcards.cancer],
        correction = os.path.join(RAW_DIR,'articles','Spainhour2017','DrugCorrection.csv')
    output:
        os.path.join(PREP_DIR,'drug_treatments','{cancer}.tsv.gz')
    shell:
        """
        python scripts/preprocess_tcga_treatments.py \
                    --treatments_file={input.treatments} \
                    --drug_correction_file={input.correction} \
                    --output_file={output}
        """
        
        
rule combine_drug_treatments:
    input:
        treatments = [os.path.join(PREP_DIR,'drug_treatments','{cancer}.tsv.gz').format(cancer=cancer) for cancer in CANCER_TYPES]
    output:
        os.path.join(PREP_DIR,'drug_treatments','PANCAN.tsv.gz')
    run:
        import os
        import pandas as pd
        dfs = []
        for f in input.treatments:
            df = pd.read_table(f)
            cancer_type = os.path.basename(f).replace('.tsv.gz','')
            df['cancer_type'] = cancer_type
            dfs.append(df)
            del df
        dfs = pd.concat(dfs)
        dfs.to_csv(output[0], sep='\t', index=False, compression="gzip")
        

rule preprocess_gdsc:
    input:
        drug_screen = os.path.join(RAW_DIR,'DepMap','gdsc','sanger-dose-response.csv'),
        demeter2 = os.path.join(PREP_DIR,'demeter2','CCLE.tsv.gz')
    output:
        gdsc1_train = os.path.join(PREP_DIR,'drug_screens','train','GDSC1.tsv.gz'),
        gdsc1_test = os.path.join(PREP_DIR,'drug_screens','test','GDSC1.tsv.gz'),
        gdsc2_train = os.path.join(PREP_DIR,'drug_screens','train','GDSC2.tsv.gz'),
        gdsc2_test = os.path.join(PREP_DIR,'drug_screens','test','GDSC2.tsv.gz'),
    run:
        import pandas as pd
        SAVE_KWS = {"sep":"\t", "index":False, "compression":"gzip"}
        drug_response = pd.read_csv(input.drug_screen)
        demeter2_samples = list(pd.read_table(input.demeter2, index_col=0, nrows=0).columns)
        
        # generate unique drug id to avoid duplicates
        # as there are drugs screend with different concentrations
        # in both screens
        drug_response["ID"] = drug_response["DRUG_ID"].astype(str) + "_" +\
                              drug_response["MAX_CONC"].astype(str)
        
        # mark if cell line was also screened in Demeter2
        # (we want to train only with unseen cell lines)
        drug_response["in_demeter2"] = drug_response["ARXSPAN_ID"].isin(demeter2_samples)
        
        # GDSC1
        idx_train = (drug_response["DATASET"] == "GDSC1") & (~drug_response["in_demeter2"])
        idx_test = (drug_response["DATASET"] == "GDSC1") & (drug_response["in_demeter2"])
        drug_response.loc[idx_train].to_csv(output.gdsc1_train, **SAVE_KWS)
        drug_response.loc[idx_test].to_csv(output.gdsc1_test, **SAVE_KWS)
        
        # GDSC2
        idx_train = (drug_response["DATASET"] == "GDSC2") & (~drug_response["in_demeter2"])
        idx_test = (drug_response["DATASET"] == "GDSC2") & (drug_response["in_demeter2"])
        drug_response.loc[idx_train].to_csv(output.gdsc2_train, **SAVE_KWS)
        drug_response.loc[idx_test].to_csv(output.gdsc2_test, **SAVE_KWS)
        

rule prep_cancer_subtypes:
    input:
        metadata = os.path.join(PREP_DIR,'metadata','{cancer}.tsv'),
        subtypes = os.path.join(RAW_DIR,'articles','Mina2017','tcga_subtypes.xls')
    output:
        subtypes = os.path.join(PREP_DIR,'metadata','{cancer}_subtypes.tsv')
    run:
        import pandas as pd
        
        subtypes = pd.read_excel(input.subtypes, skiprows=2)
        subtypes["sampleID"] = subtypes["Sample id"].str.replace(".","-")
        subtypes["cancer_subtype"] = subtypes["Subtype"]
        subtypes = subtypes[["sampleID","cancer_subtype"]]
        
        metadata = pd.read_table(input.metadata)
        metadata = metadata[["sampleID","cancer","sample_type"]]
        
        df = pd.merge(metadata, subtypes, how="left", on="sampleID")
        
        # consider STN as a subtype
        df.loc[df["sample_type"]=="Solid Tissue Normal","cancer_subtype"] = "STN"
        
        df.to_csv(output.subtypes, sep="\t", index=False)
        
        
rule merge_tcga_metadata_subtypes:
    input:
        metadata_files = [os.path.join(PREP_DIR,'metadata','{cancer}_subtypes.tsv').format(cancer=c) 
                          for c in CANCER_TYPES]
    output:
        os.path.join(PREP_DIR,'metadata','PANCAN_subtypes.tsv.gz')
    run:
        import pandas as pd
        metadata = []
        for f in input.metadata_files:
            df = pd.read_table(f)
            metadata.append(df)
            del df
        metadata = pd.concat(metadata)
        metadata.to_csv(output[0], sep='\t', index=False, compression='gzip')
        
        
rule preprocess_stringdb:
    input:
        ppi = os.path.join(RAW_DIR,'STRINGDB','9606.protein.links.full.v11.5.txt.gz'),
        aliases = os.path.join(RAW_DIR,'STRINGDB','9606.protein.aliases.v11.5.txt.gz')
    output:
        os.path.join(PREP_DIR,'ppi','STRINGDB.tsv.gz')
    shell:
        """
        python scripts/preprocess_stringdb.py \
                    --raw_ppi_file={input.ppi} \
                    --raw_aliases_file={input.aliases} \
                    --prep_ppi_file={output}
        """
        
        
rule preprocess_gdsc_targets:
    input:
        raw_drug_targets = os.path.join(RAW_DIR,'GDSC','screened_compunds_rel_8.2.csv'),
        Goncalves2020 = os.path.join(SUPPORT_DIR,'msb199405-sup-0003-datasetev2.xlsx'),
        symbol_checker = os.path.join(SUPPORT_DIR,'hgnc-symbol-check-drug_targets.csv')
    output:
        os.path.join(PREP_DIR,'drug_screens','drug_targets.tsv.gz')
    run:
        import pandas as pd
        raw_drug_targets = pd.read_csv(input.raw_drug_targets)
        # gonc = pd.read_excel(input.Goncalves2020, sheet_name="Drug sheet")
        corrector = pd.read_csv(input.symbol_checker, skiprows=1)
        
        # prep gonc
#         cols_oi = ["DRUG_ID","DRUG_NAME","SYNONYMS","TARGET","TARGET_PATHWAY"]
#         gonc = gonc.rename(columns={
#             "Drug ID": "DRUG_ID",
#             "Name": "DRUG_NAME",
#             "Synonyms": "SYNONYMS",
#             "Gene Target": "TARGET",
#             "Pathway": "TARGET_PATHWAY"
#         })[cols_oi]
#         gonc["DRUG_NAME"] = gonc["DRUG_NAME"].str.upper()
#         gonc["ORIGIN"] = "Gonçalves 2020"
        
        # prep raw
        raw_drug_targets["TARGET"] = raw_drug_targets["TARGET"].str.replace(",",";")
        raw_drug_targets["DRUG_NAME"] = raw_drug_targets["DRUG_NAME"].str.upper()
        raw_drug_targets["ORIGIN"] = "GDSC"
        raw_drug_targets = raw_drug_targets.drop(columns="SCREENING_SITE")
        
        # if available in Goncalves, keep it
#         avail_drug_ids = set(gonc["DRUG_ID"]).intersection(raw_drug_targets["DRUG_ID"])
#         drug_targets = {}
#         for drug_id in raw_drug_targets["DRUG_ID"].unique():
#             drug_name = raw_drug_targets.loc[raw_drug_targets["DRUG_ID"]==drug_id,"DRUG_NAME"].values
#             alternative = (gonc["DRUG_NAME"].isin(drug_name)) &\
#                           (~gonc["DRUG_ID"].isin(avail_drug_ids))
            
#             if drug_id in gonc["DRUG_ID"]:
#                 drug_targets[drug_id] = gonc.loc[gonc["DRUG_ID"]==drug_id]
#             elif any(alternative):
#                 drug_targets[drug_id] = gonc.loc[alternative]
#             else:
#                 drug_targets[drug_id] = raw_drug_targets.loc[raw_drug_targets["DRUG_ID"]==drug_id]
                
        drug_targets = raw_drug_targets.copy()
        
        # prep corrector dictionary
        corrector = corrector[
            ["Input","Approved symbol"]
        ].dropna().drop_duplicates()
        corrector["symbol"] = corrector["Approved symbol"].str.split(";")
        corrector = corrector.explode("symbol")
        corrector["symbol"] = corrector["symbol"].str.replace(" ","")
        corrector = corrector.set_index("Input")["symbol"].to_dict()
        
        # pivot longer the target genes
        drug_targets["TARGET"] = drug_targets["TARGET"].str.split(";")
        drug_targets = drug_targets.explode("TARGET")
        drug_targets["TARGET"] = drug_targets["TARGET"].str.replace(" ", "")
        drug_targets["TARGET"] = [corrector[t] if t in corrector.keys() else t 
                                  for t in drug_targets["TARGET"]]
        
        # save
        drug_targets.to_csv(output[0], index=False, sep="\t", compression="gzip")
        
        print("Done!")
        
        
rule preprocess_encore:
    input:
        metadata = os.path.join(RAW_DIR,'ENCODE','ENCORE','metadata','ENCORE.tsv'),
        psi = os.path.join(RAW_DIR,'ENCODE','ENCORE','vast_out','PSI-minN_1-minSD_0-noVLOW-min_ALT_use25-Tidy.tab.gz'),
        genexpr = os.path.join(RAW_DIR,'ENCODE','ENCORE','vast_out','TPM-hg38-1097.tab.gz')
    output:
        metadata = os.path.join(PREP_DIR,'metadata','ENCORE.tsv.gz'),
        psi_EX = os.path.join(PREP_DIR,'event_psi','ENCORE-EX.tsv.gz'),
        psi_ALTA = os.path.join(PREP_DIR,'event_psi','ENCORE-ALTA.tsv.gz'),
        psi_ALTD = os.path.join(PREP_DIR,'event_psi','ENCORE-ALTD.tsv.gz'),
        psi_INT = os.path.join(PREP_DIR,'event_psi','ENCORE-INT.tsv.gz'),
        genexpr = os.path.join(PREP_DIR,'genexpr_tpm','ENCORE.tsv.gz')
    run:
        import gc
        import pandas as pd
        import numpy as np
        
        # load
        print("Loading data...")
        metadata = pd.read_table(input.metadata)
        psi = pd.read_table(input.psi, index_col=0)
        genexpr = pd.read_table(input.genexpr, index_col=[0,1])
        
        gc.collect()
        
        # metadata
        print("Processing metadata...")
        ## sample names
        metadata["sampleID"] = metadata["dbxrefs"].str.replace("SRA:","")
        ## cell lines info
        metadata["cell_line"] = metadata["Biosample term name"]
        depmapids = {"K562":"ACH-000551", "HepG2":"ACH-000739"}
        metadata["DepMap_ID"] = [depmapids[c] for c in metadata["cell_line"]]
        ## KD info
        metadata["KD"] = metadata["Experiment target"].str.replace("-human","")
        ## experiment
        metadata["experiment"] = metadata["Experiment accession"]
        ## replicate
        metadata["replicate"] = metadata["Biological replicate(s)"]
        
        ## controls
        ctls_exps = []
        ctls_samps = []
        for idx, row in metadata.iterrows():
            if isinstance(row["Controlled by"], str):
                # get file accession controls
                accs = row["Controlled by"]\
                        .replace("files","")\
                        .replace("/","")\
                        .replace(" ","")\
                        .split(",")
                idx = metadata["File accession"].isin(accs)

                # get experiment accession
                exps = metadata.loc[idx, "experiment"].unique()
                
                # get sample accession
                samps = metadata.loc[idx, "sampleID"].unique()
                
                # save
                exps = ','.join(np.sort(exps))
                samps = ','.join(np.sort(samps))
                ctls_exps.append(exps)
                ctls_samps.append(samps)
            else:
                ctls_exps.append(np.nan)
                ctls_samps.append(np.nan)
        metadata["control_experiment"] = ctls_exps
        metadata["control_samples"] = ctls_samps
        
        cols_oi = ['sampleID','cell_line', 'DepMap_ID', 'KD', 'experiment', 
                   'control_experiment', 'control_samples','replicate']
        metadata = metadata[cols_oi].drop_duplicates()
        
        # PSI
        print("Processing PSI matrix...")
        ## drop empty rows
        is_na = psi.isnull()
        non_missing = is_na.shape[1] - is_na.sum(1)
        to_keep = non_missing >= 1
        psi = psi.loc[to_keep]
        
        ## remove vast-tools' suffix
        psi.columns = [c.replace('_1','') for c in psi.columns]
        
        ## split by event type
        event_types = ["EX","ALTA","ALTD","INT"]
        psis = {e: psi.loc[psi.index.str.contains(e)] for e in event_types}
        
        # TPM
        print("Processing TPM matrix...")
        ## remove vast-tools' suffix
        genexpr.columns = [c.replace('_1','') for c in genexpr.columns]
        
        # save
        print("Saving...")
        ## metadata
        metadata.to_csv(output.metadata, **SAVE_PARAMS)
        
        ## PSIs
        psis["EX"].reset_index().to_csv(output.psi_EX, **SAVE_PARAMS)
        psis["ALTD"].reset_index().to_csv(output.psi_ALTD, **SAVE_PARAMS)
        psis["ALTA"].reset_index().to_csv(output.psi_ALTA, **SAVE_PARAMS)
        psis["INT"].reset_index().to_csv(output.psi_INT, **SAVE_PARAMS)
        
        ## TPMs
        genexpr.reset_index().drop(columns='NAME').to_csv(output.genexpr, **SAVE_PARAMS)
        
        
rule make_achilles_comparable_to_demeter2:
    input:
        demeter2 = os.path.join(PREP_DIR,"demeter2","CCLE.tsv.gz"),
        achilles = os.path.join(PREP_DIR,"achilles","CCLE.tsv.gz")
    output:
        achilles = os.path.join(PREP_DIR,"achilles","CCLE_comparable.tsv.gz")
    run:
        import numpy as np
        import pandas as pd
        
        demeter2 = pd.read_table(input.demeter2, index_col=0)
        achilles = pd.read_table(input.achilles, index_col=0)
        
        # subset samples and genes
        common_samples = set(demeter2.columns).intersection(achilles.columns)
        common_genes = set(demeter2.index).intersection(achilles.index)
        demeter2 = demeter2.loc[common_genes,common_samples].copy()
        achilles = achilles.loc[common_genes,common_samples].copy()
        
        # replicate missing values
        is_missing = demeter2.isnull().values
        achilles.values[is_missing] = np.nan
        
        # save 
        achilles.reset_index().to_csv(output.achilles, sep="\t", index=False, compression="gzip")
        
        
rule make_cosmic_gene_set:
    input:
        cosmic = os.path.join(RAW_DIR,"COSMIC","cancer_gene_census.tsv")
    output:
        cosmic = os.path.join(PREP_DIR,"gene_sets","cancer_gene_census.txt")
    run:
        import pandas as pd
        
        df = pd.read_table(input.cosmic)
        gene_set = df["Gene Symbol"]
        gene_set.to_csv(output.cosmic, sep="\t", index=False, header=None)
        