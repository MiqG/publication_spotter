"""
Author: Miquel Anglada Girotto
Contact: miquelangladagirotto [at] gmail [dot] com
Last Update: 2021-01-12

Workflow purpose
--------------
Workflow to analyze putative associations between exons and cancer at single-exon level.


Outline
-------
        
"""

import os
import pandas as pd

# variables
ROOT = os.path.dirname(os.path.dirname(os.getcwd()))
SRC_DIR = os.path.join(ROOT,"src")
RAW_DIR = os.path.join(ROOT,'data','raw')
PREP_DIR = os.path.join(ROOT,'data','prep')
RESULTS_DIR = os.path.join(ROOT,'results','splicing_dependency_validation')
PANGOLIN_DIR = os.path.join(os.path.dirname(os.path.dirname(ROOT)),'repositories','Pangolin')
TS_DIR = os.path.join(os.path.dirname(os.path.dirname(ROOT)),'repositories','target_spotter')

EVENTS_OI = [
    "HsaEX0006970",
    "HsaEX0008092",
    "HsaEX0020455",
    "HsaEX0022946",
    "HsaEX0026116",
    "HsaEX0034998",
    "HsaEX0043609",
    "HsaEX0044398",
    "HsaEX0044468",
    "HsaEX0049558",
    "HsaEX0050345",
    "HsaEX0052877",
    "HsaEX0056284",
    "HsaEX0066096",
    "HsaEX0070392",
    "HsaEX0071941",
]

EVENT_GENES_OI = {
    #'HsaEX0006970': 'ATP6V0A2',
    #'HsaEX0008092': 'BIN1',
    'HsaEX0020455': 'DNM2',
    #'HsaEX0022946': 'ERBIN',
    'HsaEX0026116': 'FNBP1',
    'HsaEX0034998': 'KRAS',
    #'HsaEX0043609': 'NPNT',
    'HsaEX0044398': 'NUP85',
    #'HsaEX0044468': 'NVL',
    'HsaEX0049558': 'PPP1R12A',
    'HsaEX0050345': 'PRPF18',
    'HsaEX0052877': 'RCC1',
    #'HsaEX0056284': 'SATB2',
    #'HsaEX0066096': 'TMTC1',
    'HsaEX0070392': 'VLDLR',
    'HsaEX0071941': 'YAP1'
}


event_info = pd.read_table(os.path.join(RAW_DIR,"VastDB","EVENT_INFO-hg38_noseqs.tsv"))
EVENTS_INFO = {
    event: {
        "event_chr": event_info.loc[event_info["EVENT"]==event,"COORD_o"].values[0].split(":")[0],
        "event_start": event_info.loc[event_info["EVENT"]==event,"COORD_o"].values[0].split(":")[1].split("-")[0],
        "event_end": event_info.loc[event_info["EVENT"]==event,"COORD_o"].values[0].split(":")[1].split("-")[1],
        "event_strand": event_info.loc[event_info["EVENT"]==event,"REF_CO"].values[0].split(":")[-1]
    }
    for event in EVENTS_OI
}

METHODS_KWS = {
    "deletion": {
        "size": 10
    },
    "substitution": {
        "size": 1
    }
}

EVENT_TYPES = ["EX"]

##### RULES #####
rule all:
    input:
        # infer structures
        expand(os.path.join(RESULTS_DIR,'files','structure_inference','{event}_{gene}','proteoforms.tsv.gz'), zip, event=EVENT_GENES_OI.keys(), gene=EVENT_GENES_OI.values()),
        expand(os.path.join(RESULTS_DIR,'files','structure_inference','{event}_{gene}','proteoforms.fasta'), zip, event=EVENT_GENES_OI.keys(), gene=EVENT_GENES_OI.values()),
        
        # compute splicing dependencies (mean, median, std)
        expand(os.path.join(RESULTS_DIR,'files','splicing_dependency-{event_type}'), event_type=EVENT_TYPES),
        
        # fit gene dependencies and get empirical distributions of coefficients
        #expand(os.path.join(RESULTS_DIR,"files","pangolin_splicing_enhancers","{method}","{event}"), event=EVENTS_OI, method=METHODS_KWS.keys()),
        #expand(os.path.join(RESULTS_DIR,"files","selected_exon_sequences","{event}.fasta"), event=EVENTS_OI),

        
rule get_splicing_enhancers:
    input:
        reference = os.path.join(RAW_DIR,"GENCODE","GRCh38.p13.genome.fa.gz"),
        pangolin_dir = PANGOLIN_DIR
    output:
        directory(os.path.join(RESULTS_DIR,"files","pangolin_splicing_enhancers","{method}","{event}"))
    params:
        event_name = "{event}",
        event_chr = lambda wildcards: EVENTS_INFO[wildcards.event]["event_chr"],
        event_start = lambda wildcards: EVENTS_INFO[wildcards.event]["event_start"],
        event_end = lambda wildcards: EVENTS_INFO[wildcards.event]["event_end"],
        event_strand = lambda wildcards: EVENTS_INFO[wildcards.event]["event_strand"],
        margin_out = 250,
        method = "{method}",
        size = lambda wildcards: METHODS_KWS[wildcards.method]["size"]
    threads: 1
    resources:
        runtime = 3600*24, # 24h
        memory = 10 # GB
    shell:
        """
        nice python scripts/explore_splicing_enhancers.py \
                --event_name={params.event_name} \
                --event_chr={params.event_chr} \
                --event_start={params.event_start} \
                --event_end={params.event_end} \
                --event_strand={params.event_strand} \
                --margin_out={params.margin_out} \
                --size={params.size} \
                --method={params.method} \
                --reference_file={input.reference} \
                --pangolin_dir={input.pangolin_dir} \
                --output_dir={output}
        """
        
        
rule get_exon_sequences:
    input:
        reference = os.path.join(RAW_DIR,"GENCODE","GRCh38.p13.genome.fa.gz"),
    output:
        os.path.join(RESULTS_DIR,"files","selected_exon_sequences","{event}.fasta")
    params:
        event_name = "{event}",
        event_chr = lambda wildcards: EVENTS_INFO[wildcards.event]["event_chr"],
        event_start = lambda wildcards: EVENTS_INFO[wildcards.event]["event_start"],
        event_end = lambda wildcards: EVENTS_INFO[wildcards.event]["event_end"],
        event_strand = lambda wildcards: EVENTS_INFO[wildcards.event]["event_strand"],
        margin_out = 250
    threads: 1
    resources:
        runtime = int(3600*0.5), # 0.5h
        memory = 2 # GB
    shell:
        """
        nice python scripts/get_exon_sequence.py \
                        --event_name={params.event_name} \
                        --event_chr={params.event_chr} \
                        --event_start={params.event_start} \
                        --event_end={params.event_end} \
                        --event_strand={params.event_strand} \
                        --margin_out={params.margin_out} \
                        --reference_file={input.reference} \
                        --output_file={output}
        """
        
        
rule structure_inference_get_proteoforms:
    input:
        annotation = os.path.join(RAW_DIR,'VastDB','event_annotation-Hs2.tsv.gz'),
        event_info = os.path.join(RAW_DIR,"VastDB","EVENT_INFO-hg38.tab.gz")
    output:
        df = os.path.join(RESULTS_DIR,'files','structure_inference','{event}_{gene}','proteoforms.tsv.gz'),
        fasta = os.path.join(RESULTS_DIR,'files','structure_inference','{event}_{gene}','proteoforms.fasta')
    params:
        script_dir = os.path.join(SRC_DIR,"python"),
        event_oi = "{event}",
        gene_oi = "{gene}"
    shell:
        """
        nice python {params.script_dir}/get_proteoforms.py \
                    --event_oi={params.event_oi} \
                    --gene_oi={params.gene_oi} \
                    --annotation_file={input.annotation} \
                    --event_info_file={input.event_info} \
                    --output_df_file={output.df} \
                    --output_fasta_file={output.fasta}
        """
        

rule compute_splicing_dependency:
    input:
        psi = os.path.join(RAW_DIR,"experiments","validation_therapeutic_potential","20220928-psi-aso-matrix.tsv"),
        genexpr = os.path.join(PREP_DIR,'genexpr_tpm','CCLE.tsv.gz'),
        coefs_dir = os.path.join(ROOT,'results','model_splicing_dependency','files','models_gene_dependency-{event_type}')
    output:
        directory(os.path.join(RESULTS_DIR,'files','splicing_dependency-{event_type}'))
    threads: 24
    resources:
        runtime = 86400, # seconds = 24h = 1 day
        memory = 30
    params:
        script_dir = TS_DIR
    shell:
        """
        nice python {params.script_dir}/target_spotter spldep_predict \
                    --splicing_file={input.psi} \
                    --genexpr_file={input.genexpr} \
                    --coefs_splicing_file={input.coefs_dir}/coefs_splicing.pickle.gz \
                    --coefs_genexpr_file={input.coefs_dir}/coefs_genexpr.pickle.gz \
                    --coefs_intercept_file={input.coefs_dir}/coefs_intercept.pickle.gz \
                    --output_dir={output} \
                    --n_jobs={threads} \
                    --log_transform
        """