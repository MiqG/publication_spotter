"""
Author: Miquel Anglada Girotto
Contact: miquelangladagirotto [at] gmail [dot] com
Last Update: 2021-01-12

Workflow purpose
--------------
Workflow to analyze putative associations between exons and cancer at single-exon level.


Outline
-------
- infer splicing dependency
- differential PSI tumor vs normal by cancer type

"""

import os

# variables
ROOT = os.path.dirname(os.path.dirname(os.getcwd()))
RAW_DIR = os.path.join(ROOT,'data','raw')
PREP_DIR = os.path.join(ROOT,'data','prep')
RESULTS_DIR = os.path.join(ROOT,'results','splicing_dependency_tcga')
SRC_DIR = os.path.join(ROOT,'src')
MODELS_DIR = os.path.join(ROOT,'results','model_splicing_dependency')
DRUG_ASSOC_DIR = os.path.join(ROOT,'results','splicing_dependency_drugs')
TS_DIR = os.path.join(os.path.dirname(os.path.dirname(ROOT)),'repositories','target_spotter')

EVENT_TYPES = ['EX'] # ['EX','ALTA','ALTD']
CANCER_TYPES = [
    'BRCA',
    'COAD',
    'GBM',
    'HNSC',
    'KICH',
    'KIRC',
    'KIRP',
    'LGG',
    'LIHC',
    'LUAD',
    'LUSC',
    'PRAD',
    'READ',
    'THCA',
    'UCEC',
    'UCS'
]

CANCER_SUBTYPES = {
    'brca_NotBasal': 'BRCA',
    'brca_Basal': 'BRCA',
    'brca_Her2': 'BRCA',
    'crc_MSS': 'READ',
    'crc_MSI': 'READ',
    'crc_POLE': 'READ',
    'gmb_IDH_wildtype': 'GBM',
    'gbm_IDH_mutant': 'GBM',
    'lgg_IDH_mutant': 'LGG',
    'lgg_IDH_mutant_codeletion': 'LGG',
    'lgg_IDH_wildtype': 'LGG',
    'ucec_CN_low': 'UCEC',
    'ucec_CN_high': 'UCEC',
    'ucec_POLE': 'UCEC',
    'ucec_MSI': 'UCEC'
}


# RESPONSE_CANCER_TYPES = [
#     'BRCA', 
#     'COAD', 
#     'HNSC', 
#     'LGG', 
#     'LIHC', 
#     'LUAD', 
#     'PRAD', 
#     'READ', 
#     'UCEC', 
#     'UCS'
# ]

# RESPONSE_TREATMENT = {
#     'BRCA': 'CYCLOPHOSPHAMIDE+DOXORUBICIN', 
#     'COAD': 'FLUOROURACIL+LEUCOVORIN+OXALIPLATIN', 
#     'HNSC': 'CISPLATIN', 
#     'LGG': 'TEMOZOLOMIDE', 
#     'LIHC': 'SORAFENIB', 
#     'LUAD': 'CARBOPLATIN+PACLITAXEL', 
#     'PRAD': 'LEUPROLIDE', 
#     'READ': 'FLUOROURACIL+LEUCOVORIN+OXALIPLATIN', 
#     'UCEC': 'CARBOPLATIN+PACLITAXEL', 
#     'UCS': 'CARBOPLATIN+PACLITAXEL'
# }
DRUG_SCREENS = ['GDSC1','GDSC2']

DATASETS = ['psi','spldep']
COMPARISONS = ['PrimaryTumor_vs_SolidTissueNormal'] #,'RESPONDER_vs_NONRESPONDER']
PADJ_METHOD = 'fdr_bh'
SAVE_PARAMS = {"sep":"\t", "index":False, "compression":"gzip"}

##### RULES #####
rule all:
    input:
        # compute splicing dependencies TCGA
        expand(os.path.join(RESULTS_DIR,'files','{cancer}','splicing_dependency-{event_type}'), event_type=EVENT_TYPES, cancer=CANCER_TYPES),
        expand(os.path.join(RESULTS_DIR,'files','PANCAN','splicing_dependency-{event_type}'), event_type=EVENT_TYPES),
        expand(os.path.join(RESULTS_DIR,'files','PANCAN','summary_splicing_dependency-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        expand(os.path.join(RESULTS_DIR,'files','PANCAN_subtypes','summary_splicing_dependency-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        
        # impute splicing dependencies TCGA
        expand(os.path.join(RESULTS_DIR,'files','{cancer}','imputed_splicing_dependency_mean-{event_type}.tsv.gz'), cancer=CANCER_TYPES+["PANCAN"], event_type=EVENT_TYPES),
        
        # embed and cluster TCGA
        expand(os.path.join(RESULTS_DIR,'files','{cancer}','embedded_splicing_dependency_mean-{event_type}.tsv.gz'), cancer=CANCER_TYPES+["PANCAN"], event_type=['EX']),
                
        # differential sample type TCGA
        ## PSI
        expand(os.path.join(RESULTS_DIR,'files','{cancer}','mannwhitneyu-psi-PrimaryTumor_vs_SolidTissueNormal.tsv.gz'), cancer=CANCER_TYPES),
        ## PSI (cancer subtype)
        expand(os.path.join(RESULTS_DIR,'files','{subtype}','mannwhitneyu-psi-PrimaryTumor_vs_SolidTissueNormal.tsv.gz'), subtype=CANCER_SUBTYPES.keys()),
        
        # combine differential analyses
        ## cancer type
        expand(os.path.join(RESULTS_DIR,'files','PANCAN','mannwhitneyu-PrimaryTumor_vs_SolidTissueNormal-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        ## cancer subtype
        expand(os.path.join(RESULTS_DIR,'files','PANCAN_subtypes','mannwhitneyu-PrimaryTumor_vs_SolidTissueNormal-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        
        # run GSEA for each differential analysis
        expand(os.path.join(RESULTS_DIR,'files','{cancer}','gsea-{comparison}-{event_type}.tsv.gz'), event_type=EVENT_TYPES, comparison=['PrimaryTumor_vs_SolidTissueNormal'], cancer=CANCER_TYPES, dataset=DATASETS),
        
        # combine GSEA
        expand(os.path.join(RESULTS_DIR,'files','PANCAN','gsea-PrimaryTumor_vs_SolidTissueNormal-{event_type}.tsv.gz'), dataset=DATASETS, event_type=EVENT_TYPES),
        
        # survival analyses
        # expand(os.path.join(RESULTS_DIR,'files','{cancer}','survival_analysis-coxph-{event_type}.tsv.gz'),cancer=CANCER_TYPES, event_type=EVENT_TYPES),

        # plot
        # expand(os.path.join(RESULTS_DIR,'figures','differential_analysis-{event_type}'), event_type=EVENT_TYPES)
        
        # estimate drug responses
        expand(os.path.join(RESULTS_DIR,'files','{cancer}','estimated_drug_response-{drug_screen}-{event_type}'), cancer=CANCER_TYPES, event_type=EVENT_TYPES, drug_screen=DRUG_SCREENS),
        
        # combine drug responses
        expand(os.path.join(RESULTS_DIR,'files','PANCAN','estimated_drug_response_by_drug-{event_type}.tsv.gz'), event_type=EVENT_TYPES),
        
        
rule compute_splicing_dependency_tcga:
    input:
        psi = os.path.join(PREP_DIR,'event_psi','{cancer}.tsv'),
        genexpr = os.path.join(PREP_DIR,'gene_counts','{cancer}.tsv'),
        coefs_dir = os.path.join(MODELS_DIR,'files','models_gene_dependency-{event_type}')
    output:
        directory(os.path.join(RESULTS_DIR,'files','{cancer}','splicing_dependency-{event_type}'))
    threads: 15
    params:
        script_dir = TS_DIR,
        normalize_counts = True
    shell:
        """
        python {params.script_dir}/target_spotter spldep_predict \
                    --splicing_file={input.psi} \
                    --genexpr_file={input.genexpr} \
                    --coefs_splicing_file={input.coefs_dir}/coefs_splicing.pickle.gz \
                    --coefs_genexpr_file={input.coefs_dir}/coefs_genexpr.pickle.gz \
                    --coefs_interaction_file={input.coefs_dir}/coefs_interaction.pickle.gz \
                    --coefs_intercept_file={input.coefs_dir}/coefs_intercept.pickle.gz \
                    --output_dir={output} \
                    --normalize_counts={params.normalize_counts} \
                    --n_jobs={threads}
        """
        
rule combine_splicing_dependency_tcga:
    input:
        spldep = [os.path.join(RESULTS_DIR,'files','{cancer}','splicing_dependency-{event_type}').format(cancer=c, event_type='{event_type}') for c in CANCER_TYPES],
        selected_events = os.path.join(MODELS_DIR,'files','selected_models-{event_type}.txt')
    output:
        directory(os.path.join(RESULTS_DIR,'files','PANCAN','splicing_dependency-{event_type}'))
    run:
        import os
        import gc
        import pandas as pd
        
        selected_events = pd.read_table(input.selected_events, header=None)[0].to_list()
        
        spldep_means = []
        spldep_medians = []
        spldep_stds = []
        for d in input.spldep:
            print(d)
            spldep_mean = pd.read_table(os.path.join(d,'mean.tsv.gz'), index_col=0)
            avail_events = set(selected_events).intersection(spldep_mean.index)
            spldep_mean = spldep_mean.loc[avail_events].copy()
            spldep_median = pd.read_table(os.path.join(d,'median.tsv.gz'), index_col=0)
            spldep_median = spldep_median.loc[avail_events].copy()
            spldep_std = pd.read_table(os.path.join(d,'std.tsv.gz'), index_col=0)
            spldep_std = spldep_std.loc[avail_events].copy()
            
            spldep_means.append(spldep_mean)
            spldep_medians.append(spldep_median)
            spldep_stds.append(spldep_std)
            
            del spldep_mean, spldep_median, spldep_std
            gc.collect()
            
        spldep_means = pd.concat(spldep_means, axis=1).reset_index()
        spldep_medians = pd.concat(spldep_medians, axis=1).reset_index()
        spldep_stds = pd.concat(spldep_stds, axis=1).reset_index()
        
        os.makedirs(output[0])
        spldep_means.to_csv(os.path.join(output[0],'mean.tsv.gz'), **SAVE_PARAMS)
        spldep_medians.to_csv(os.path.join(output[0],'median.tsv.gz'), **SAVE_PARAMS)
        spldep_stds.to_csv(os.path.join(output[0],'std.tsv.gz'), **SAVE_PARAMS)

        
rule summarize_splicing_dependency:
    input:
        spldeps = [os.path.join(RESULTS_DIR,'files','{cancer}','splicing_dependency-{event_type}','mean.tsv.gz').format(cancer=cancer, event_type='{event_type}') for cancer in CANCER_TYPES],
        metadatas = [os.path.join(PREP_DIR,'metadata','{cancer}.tsv').format(cancer=cancer) for cancer in CANCER_TYPES]
    output:
        os.path.join(RESULTS_DIR,'files','PANCAN','summary_splicing_dependency-{event_type}.tsv.gz')
    run:
        import os
        import pandas as pd
        dfs = []
        for spldep_file, metadata_file in zip(input.spldeps, input.metadatas):
            cancer_type = os.path.basename(os.path.dirname(os.path.dirname(spldep_file)))
            print(cancer_type)
            
            spldep = pd.read_table(spldep_file, index_col=0)
            metadata = pd.read_table(metadata_file)
            
            # only Primary Tumors
            samples_oi = metadata.loc[metadata["sample_type"]=="Primary Tumor","sampleID"].values
            samples_oi = set(spldep.columns).intersection(samples_oi)
            print(samples_oi)
            
            df = pd.DataFrame({
                "EVENT": spldep.index,
                "mean": spldep[samples_oi].mean(axis=1),
                "median": spldep[samples_oi].median(axis=1),
                "std": spldep[samples_oi].std(axis=1),
                "q05": spldep[samples_oi].quantile(0.05, axis=1),
                "q95": spldep[samples_oi].quantile(0.95, axis=1),
                "nobs": len(samples_oi)
            })
            df["cancer_type"] = cancer_type
            dfs.append(df)
        dfs = pd.concat(dfs)
        dfs.to_csv(output[0], sep="\t", index=False, compression="gzip")
        
        
rule summarize_splicing_dependency_by_cancer_subtype:
    input:
        spldeps = [os.path.join(RESULTS_DIR,'files','{cancer}','splicing_dependency-{event_type}','mean.tsv.gz').format(cancer=c, event_type='{event_type}') for c in set(CANCER_SUBTYPES.values())],
        metadatas = [os.path.join(PREP_DIR,'metadata','{cancer}_subtypes.tsv').format(cancer=c) for c in set(CANCER_SUBTYPES.values())]
    output:
        os.path.join(RESULTS_DIR,'files','PANCAN_subtypes','summary_splicing_dependency-{event_type}.tsv.gz')
    run:
        import os
        import pandas as pd
        dfs = []
        for spldep_file, metadata_file in zip(input.spldeps, input.metadatas):
            cancer_type = os.path.basename(os.path.dirname(os.path.dirname(spldep_file)))
            spldep = pd.read_table(spldep_file, index_col=0)
            metadata = pd.read_table(metadata_file)
            
            cancer_subtypes = set(metadata["cancer_subtype"].dropna().unique()) - {"STN"}
            for cancer_subtype in cancer_subtypes:
                print(cancer_subtype)
                # only Primary Tumors and cancer subtype
                idx = (metadata["sample_type"]=="Primary Tumor") & \
                      (metadata["cancer_subtype"]==cancer_subtype)
                samples_oi = metadata.loc[idx,"sampleID"].values
                samples_oi = set(spldep.columns).intersection(samples_oi)

                df = pd.DataFrame({
                    "EVENT": spldep.index,
                    "mean": spldep[samples_oi].mean(axis=1),
                    "median": spldep[samples_oi].median(axis=1),
                    "std": spldep[samples_oi].std(axis=1),
                    "q05": spldep[samples_oi].quantile(0.05, axis=1),
                    "q95": spldep[samples_oi].quantile(0.95, axis=1),
                    "nobs": len(samples_oi)
                })
                df["cancer_type"] = cancer_type
                df["cancer_subtype"] = cancer_subtype
                dfs.append(df)
                
                del df
                
        dfs = pd.concat(dfs)
        dfs.to_csv(output[0], sep="\t", index=False, compression="gzip")
        
        
rule predict_drug_response:
    input:
        spldep = os.path.join(RESULTS_DIR,'files','{cancer}','splicing_dependency-{event_type}','mean.tsv.gz'),
        fitted_dir = os.path.join(DRUG_ASSOC_DIR,'files','models_drug_response-{drug_screen}-{event_type}')
    output:
        directory(os.path.join(RESULTS_DIR,'files','{cancer}','estimated_drug_response-{drug_screen}-{event_type}'))
    params:
        script_dir = TS_DIR
    shell:
        """
        python {params.script_dir}/target_spotter drugassoc_predict \
                    --splicing_dependency_file={input.spldep} \
                    --model_summaries_file={input.fitted_dir}/model_summaries.tsv.gz \
                    --fitted_growth_rates_file={input.fitted_dir}/growth_rates.tsv.gz \
                    --fitted_spldep_file={input.fitted_dir}/fitted_splicing_dependency.tsv.gz \
                    --output_dir={output}
        """
        
rule combine_drug_rankings:
    input:
        [os.path.join(RESULTS_DIR,'files','{cancer}','estimated_drug_response-{drug_screen}-{event_type}').format(cancer=cancer, drug_screen=drug_screen, event_type='{event_type}') for cancer in CANCER_TYPES for drug_screen in DRUG_SCREENS]
    output:
        os.path.join(RESULTS_DIR,'files','PANCAN','estimated_drug_response_by_drug-{event_type}.tsv.gz')
    run:
        import os
        import pandas as pd
        dfs = []
        for d in input:
            cancer_type = os.path.basename(os.path.dirname(d))
            drug_screen = os.path.basename(d).replace('estimated_drug_response-','')[:5]
            print(drug_screen, cancer_type)
            filename = os.path.join(d,'estimated_drug_response_by_drug.tsv.gz')
            df = pd.read_table(filename)
            df["cancer_type"] = cancer_type
            df["drug_screen"] = drug_screen
            dfs.append(df)
            
        dfs = pd.concat(dfs)    
        dfs.to_csv(output[0], sep="\t", index=False, compression="gzip")
            
        
rule impute_splicing_dependency:
    input:
        spldep = os.path.join(RESULTS_DIR,'files','{cancer}','splicing_dependency-{event_type}','mean.tsv.gz'),
        rows_oi = os.path.join(MODELS_DIR,'files','selected_models-{event_type}.txt')
    output:
        os.path.join(RESULTS_DIR,'files','{cancer}','imputed_splicing_dependency_mean-{event_type}.tsv.gz')
    params:
        script_dir=os.path.join(SRC_DIR,'python'),
        method = 'knn',
        method_kws = '\'{"n_neighbors":5}\'',
        features_as_rows = True
    shell:
        """
        python {params.script_dir}/impute_nan.py \
                    --input_file={input.spldep} \
                    --output_file={output} \
                    --rows_oi_file={input.rows_oi} \
                    --method={params.method} \
                    --method_kws={params.method_kws} \
                    --features_as_rows={params.features_as_rows}
        """
        
        
rule embed_matrices:
    input:
        os.path.join(RESULTS_DIR,'files','{cancer}','imputed_splicing_dependency_mean-{event_type}.tsv.gz')
    output:
        os.path.join(RESULTS_DIR,'files','{cancer}','embedded_splicing_dependency_mean-{event_type}.tsv.gz')
    params:
        script_dir=os.path.join(SRC_DIR,'python')
    shell:
        """
        python {params.script_dir}/embed_and_cluster.py \
                    --matrix_file={input} \
                    --output_file={output} 
        """
        
        
rule differential_psi_sample_type:
    input:
        psi = os.path.join(PREP_DIR,'event_psi','{cancer}.tsv'),
        metadata = os.path.join(PREP_DIR,'metadata','{cancer}.tsv')
    output:
        os.path.join(RESULTS_DIR,'files','{cancer}','mannwhitneyu-psi-PrimaryTumor_vs_SolidTissueNormal.tsv.gz')
    params:
        script_dir=os.path.join(SRC_DIR,'python'),
        padj_method = PADJ_METHOD
    shell:
        """
        python {params.script_dir}/MannWhitneyU.py \
                    --data_file={input.psi} \
                    --metadata_file={input.metadata} \
                    --sample_col='sampleID' \
                    --comparison_col='sample_type' \
                    --condition_a='Primary Tumor' \
                    --condition_b='Solid Tissue Normal' \
                    --output_file={output} \
                    --padj_method={params.padj_method} 
        """
        
        
rule combine_differential_analyses_sample_type:
    input:
        psi_files = [os.path.join(RESULTS_DIR,'files','{cancer}','mannwhitneyu-psi-PrimaryTumor_vs_SolidTissueNormal.tsv.gz').format(cancer=cancer, event_type='{event_type}')
                     for cancer in CANCER_TYPES],
    params:
        event_type = '{event_type}'
    output:
        os.path.join(RESULTS_DIR,'files','PANCAN','mannwhitneyu-PrimaryTumor_vs_SolidTissueNormal-{event_type}.tsv.gz')
    run:
        import os
        import pandas as pd
        
        event_type = params.event_type
        
        dfs = []
        for psi_file in input.psi_files:
            # combine
            psi = pd.read_table(psi_file).set_index('EVENT').add_prefix('psi__')
            psi = psi.loc[psi.index.str.contains(event_type)].copy() # filter event types
            df = psi.reset_index()
            
            # add cancer type
            cancer_type = os.path.basename(os.path.dirname(psi_file))
            print(cancer_type)
            df['cancer_type'] = cancer_type
            
            dfs.append(df)
            
            del psi, df
            
        dfs = pd.concat(dfs)  
        dfs.to_csv(output[0], sep='\t', index=False, compression='gzip')
        
        
rule differential_psi_sample_type_cancer_subtype:
    input:
        psi = lambda wildcards: os.path.join(PREP_DIR,'event_psi','{cancer}.tsv').format(cancer=CANCER_SUBTYPES[wildcards.subtype]),
        metadata = lambda wildcards: os.path.join(PREP_DIR,'metadata','{cancer}_subtypes.tsv').format(cancer=CANCER_SUBTYPES[wildcards.subtype])
    output:
        os.path.join(RESULTS_DIR,'files','{subtype}','mannwhitneyu-psi-PrimaryTumor_vs_SolidTissueNormal.tsv.gz')
    params:
        script_dir=os.path.join(SRC_DIR,'python'),
        padj_method = PADJ_METHOD,
        subtype = '{subtype}'
    shell:
        """
        python {params.script_dir}/MannWhitneyU.py \
                    --data_file={input.psi} \
                    --metadata_file={input.metadata} \
                    --sample_col='sampleID' \
                    --comparison_col='sample_type' \
                    --condition_a='Primary Tumor' \
                    --condition_b='Solid Tissue Normal' \
                    --output_file={output} \
                    --subset_col='cancer_subtype' \
                    --subset_values='{params.subtype},STN' \
                    --padj_method={params.padj_method} 
        """
        
        
rule combine_differential_analyses_sample_type_cancer_subtype:
    input:
        psi_files = [os.path.join(RESULTS_DIR,'files','{subtype}','mannwhitneyu-psi-PrimaryTumor_vs_SolidTissueNormal.tsv.gz').format(subtype=subtype, event_type='{event_type}')
                     for subtype in CANCER_SUBTYPES.keys()],
    params:
        event_type = '{event_type}'
    output:
        os.path.join(RESULTS_DIR,'files','PANCAN_subtypes','mannwhitneyu-PrimaryTumor_vs_SolidTissueNormal-{event_type}.tsv.gz')
    run:
        import os
        import pandas as pd
        
        event_type = params.event_type
        
        dfs = []
        for psi_file in input.psi_files:
            # combine
            psi = pd.read_table(psi_file).set_index('EVENT').add_prefix('psi__')
            psi = psi.loc[psi.index.str.contains(event_type)].copy() # filter event types
            df = psi.reset_index()
            
            # add cancer type
            cancer_subtype = os.path.basename(os.path.dirname(psi_file))
            cancer_type = CANCER_SUBTYPES[cancer_subtype]
            print(cancer_type, cancer_subtype)
            df['cancer_type'] = cancer_type
            df['cancer_subtype'] = cancer_subtype
            
            dfs.append(df)
            
            del psi, df
            
        dfs = pd.concat(dfs)  
        dfs.to_csv(output[0], sep='\t', index=False, compression='gzip')
        
        
rule gsea_differential_analyses:
    input:
        diff_psi = os.path.join(RESULTS_DIR,'files','{cancer}','mannwhitneyu-psi-{comparison}.tsv.gz'),
        diff_spldep = os.path.join(RESULTS_DIR,'files','{cancer}','mannwhitneyu-spldep-{comparison}-{event_type}.tsv.gz'),
        annotation = os.path.join(RAW_DIR,'VastDB','EVENT_INFO-hg38_noseqs.tsv'),
        msigdb = os.path.join(RAW_DIR,'MSigDB','msigdb_v7.4','msigdb_v7.4_files_to_download_locally','msigdb_v7.4_GMTs'),
        protein_impact = os.path.join(RAW_DIR,'VastDB','PROT_IMPACT-hg38-v3.tab.gz')
    output:
        os.path.join(RESULTS_DIR,'files','{cancer}','gsea-{comparison}-{event_type}.tsv.gz')
    shell:
        """
        Rscript scripts/run_gsea.R \
                    --diff_psi_file={input.diff_psi} \
                    --diff_spldep_file={input.diff_spldep} \
                    --annotation_file={input.annotation} \
                    --msigdb_dir={input.msigdb} \
                    --protein_impact_file={input.protein_impact} \
                    --output_file={output}
        """
     
    
rule combine_gsea_results_sample_type:
    input:
        [os.path.join(RESULTS_DIR,'files','{cancer}','gsea-PrimaryTumor_vs_SolidTissueNormal-{event_type}.tsv.gz').format(cancer=cancer, event_type='{event_type}')
        for cancer in CANCER_TYPES]
    output:
        os.path.join(RESULTS_DIR,'files','PANCAN','gsea-PrimaryTumor_vs_SolidTissueNormal-{event_type}.tsv.gz')
    run:
        import os
        import pandas as pd
        dfs = []
        for gsea_result_file in input:
            df = pd.read_table(gsea_result_file)
            cancer_type = os.path.basename(os.path.dirname(gsea_result_file))
            df['cancer_type'] = cancer_type
            dfs.append(df)
            print(cancer_type)
            
            del df, cancer_type
            
        dfs = pd.concat(dfs)  
        dfs.to_csv(output[0], sep='\t', index=False, compression='gzip')
        
        
rule figures_differential_analysis:
    input:
        diff_result_sample = os.path.join(RESULTS_DIR,'files','PANCAN','mannwhitneyu-PrimaryTumor_vs_SolidTissueNormal-{event_type}.tsv.gz'),
        diff_result_response = os.path.join(RESULTS_DIR,'files','PANCAN','mannwhitneyu-RESPONDER_vs_NONRESPONDER-{event_type}.tsv.gz'),
        annotation = os.path.join(RAW_DIR,'VastDB','EVENT_INFO-hg38_noseqs.tsv'),
        selected_events = os.path.join(MODELS_DIR,'files','selected_models-EX.txt'),
        metadata = os.path.join(PREP_DIR,'metadata','PANCAN.tsv.gz'),
        spldep = os.path.join(RESULTS_DIR,'files','BRCA','splicing_dependency-{event_type}','mean.tsv.gz'),
        psi_ccle = os.path.join(PREP_DIR,'event_psi','CCLE-EX.tsv.gz')
    output:
        directory(os.path.join(RESULTS_DIR,'figures','differential_analysis-{event_type}'))
    shell:
        """
        Rscript scripts/figures_differential_analysis.R \
                    --diff_result_sample_file={input.diff_result_sample} \
                    --diff_result_response_file={input.diff_result_response} \
                    --selected_events_file={input.selected_events} \
                    --annotation_file={input.annotation} \
                    --spldep_file={input.spldep} \
                    --metadata_file={input.metadata} \
                    --psi_ccle_file={input.psi_ccle} \
                    --figs_dir={output}
        """
        
        
rule survival_analysis_coxph:
    input:
        spldep = os.path.join(RESULTS_DIR,'files','{cancer}','splicing_dependency-{event_type}','mean.tsv.gz'),
        metadata = os.path.join(PREP_DIR,'metadata','{cancer}.tsv')
    output:
        os.path.join(RESULTS_DIR,'files','{cancer}','survival_analysis-coxph-{event_type}.tsv.gz')
    params:
        script_dir = os.path.join(SRC_DIR,'python'),
        sample_col = "sampleID",
        time_col = "PFI.time",
        event_col = "PFI",
        subset_col = "sample_type",
        subset_values = "'Primary Tumor'",
        padj_method = PADJ_METHOD
    shell:
        """
        python {params.script_dir}/CoxPH.py \
                                    --data_file={input.spldep} \
                                    --metadata_file={input.metadata} \
                                    --sample_col={params.sample_col} \
                                    --time_col={params.time_col} \
                                    --event_col={params.event_col} \
                                    --subset_col={params.subset_col} \
                                    --subset_values={params.subset_values} \
                                    --padj_method={params.padj_method} \
                                    --output_file={output}
        """